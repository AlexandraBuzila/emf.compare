/*******************************************************************************
 * Copyright (c) 2006, 2007 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.compare.diff.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.compare.diff.metamodel.util.DiffAdapterFactory;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DiffItemProviderAdapterFactory extends DiffAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DiffItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.DiffModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffModelItemProvider diffModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.DiffModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDiffModelAdapter() {
		if (diffModelItemProvider == null) {
			diffModelItemProvider = new DiffModelItemProvider(this);
		}

		return diffModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.DiffGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGroupItemProvider diffGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.DiffGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDiffGroupAdapter() {
		if (diffGroupItemProvider == null) {
			diffGroupItemProvider = new DiffGroupItemProvider(this);
		}

		return diffGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.AttributeChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeChangeItemProvider attributeChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.AttributeChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAttributeChangeAdapter() {
		if (attributeChangeItemProvider == null) {
			attributeChangeItemProvider = new AttributeChangeItemProvider(this);
		}

		return attributeChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.ReferenceChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceChangeItemProvider referenceChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.ReferenceChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createReferenceChangeAdapter() {
		if (referenceChangeItemProvider == null) {
			referenceChangeItemProvider = new ReferenceChangeItemProvider(this);
		}

		return referenceChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.ModelElementChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelElementChangeItemProvider modelElementChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.ModelElementChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createModelElementChangeAdapter() {
		if (modelElementChangeItemProvider == null) {
			modelElementChangeItemProvider = new ModelElementChangeItemProvider(this);
		}

		return modelElementChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.AddModelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddModelElementItemProvider addModelElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.AddModelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAddModelElementAdapter() {
		if (addModelElementItemProvider == null) {
			addModelElementItemProvider = new AddModelElementItemProvider(this);
		}

		return addModelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.RemoveModelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveModelElementItemProvider removeModelElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.RemoveModelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRemoveModelElementAdapter() {
		if (removeModelElementItemProvider == null) {
			removeModelElementItemProvider = new RemoveModelElementItemProvider(this);
		}

		return removeModelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.UpdateModelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateModelElementItemProvider updateModelElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.UpdateModelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createUpdateModelElementAdapter() {
		if (updateModelElementItemProvider == null) {
			updateModelElementItemProvider = new UpdateModelElementItemProvider(this);
		}

		return updateModelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.MoveModelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveModelElementItemProvider moveModelElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.MoveModelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMoveModelElementAdapter() {
		if (moveModelElementItemProvider == null) {
			moveModelElementItemProvider = new MoveModelElementItemProvider(this);
		}

		return moveModelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.AddAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddAttributeItemProvider addAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.AddAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAddAttributeAdapter() {
		if (addAttributeItemProvider == null) {
			addAttributeItemProvider = new AddAttributeItemProvider(this);
		}

		return addAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.RemoveAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveAttributeItemProvider removeAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.RemoveAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRemoveAttributeAdapter() {
		if (removeAttributeItemProvider == null) {
			removeAttributeItemProvider = new RemoveAttributeItemProvider(this);
		}

		return removeAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.UpdateAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateAttributeItemProvider updateAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.UpdateAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createUpdateAttributeAdapter() {
		if (updateAttributeItemProvider == null) {
			updateAttributeItemProvider = new UpdateAttributeItemProvider(this);
		}

		return updateAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.AddReferenceValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddReferenceValueItemProvider addReferenceValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.AddReferenceValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAddReferenceValueAdapter() {
		if (addReferenceValueItemProvider == null) {
			addReferenceValueItemProvider = new AddReferenceValueItemProvider(this);
		}

		return addReferenceValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.RemoveReferenceValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveReferenceValueItemProvider removeReferenceValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.RemoveReferenceValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRemoveReferenceValueAdapter() {
		if (removeReferenceValueItemProvider == null) {
			removeReferenceValueItemProvider = new RemoveReferenceValueItemProvider(this);
		}

		return removeReferenceValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.UpdateReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateReferenceItemProvider updateReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.UpdateReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createUpdateReferenceAdapter() {
		if (updateReferenceItemProvider == null) {
			updateReferenceItemProvider = new UpdateReferenceItemProvider(this);
		}

		return updateReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.diff.metamodel.ModelInputSnapshot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelInputSnapshotItemProvider modelInputSnapshotItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.diff.metamodel.ModelInputSnapshot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createModelInputSnapshotAdapter() {
		if (modelInputSnapshotItemProvider == null) {
			modelInputSnapshotItemProvider = new ModelInputSnapshotItemProvider(this);
		}

		return modelInputSnapshotItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (diffModelItemProvider != null)
			diffModelItemProvider.dispose();
		if (diffGroupItemProvider != null)
			diffGroupItemProvider.dispose();
		if (attributeChangeItemProvider != null)
			attributeChangeItemProvider.dispose();
		if (referenceChangeItemProvider != null)
			referenceChangeItemProvider.dispose();
		if (modelElementChangeItemProvider != null)
			modelElementChangeItemProvider.dispose();
		if (addModelElementItemProvider != null)
			addModelElementItemProvider.dispose();
		if (removeModelElementItemProvider != null)
			removeModelElementItemProvider.dispose();
		if (updateModelElementItemProvider != null)
			updateModelElementItemProvider.dispose();
		if (moveModelElementItemProvider != null)
			moveModelElementItemProvider.dispose();
		if (addAttributeItemProvider != null)
			addAttributeItemProvider.dispose();
		if (removeAttributeItemProvider != null)
			removeAttributeItemProvider.dispose();
		if (updateAttributeItemProvider != null)
			updateAttributeItemProvider.dispose();
		if (addReferenceValueItemProvider != null)
			addReferenceValueItemProvider.dispose();
		if (removeReferenceValueItemProvider != null)
			removeReferenceValueItemProvider.dispose();
		if (updateReferenceItemProvider != null)
			updateReferenceItemProvider.dispose();
		if (modelInputSnapshotItemProvider != null)
			modelInputSnapshotItemProvider.dispose();
	}

}

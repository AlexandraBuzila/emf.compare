<!-- ***************************************************************************
 * Copyright (c) 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 **************************************************************************** -->
 
 <!-- @author Moritz Eysholdt - Initial contribution and API -->
 
<workflow>
	<property name="grammarURI" value="classpath:/org/eclipse/emf/compare/epatch/dsl/Epatch.xtext"/>
	<property name="file.extensions" value="epatch"/>
	<property name="mdProjectName" value="org.eclipse.emf.compare.epatch"/>
	<property name="rtProjectName" value="org.eclipse.emf.compare.epatch.dsl"/>
	<property name="uiProjectName" value="org.eclipse.emf.compare.epatch.dsl.ui"/>
	
	<property name="mdProject" value="../${mdProjectName}"/>
	<property name="rtProject" value="../${rtProjectName}"/>
	<property name="uiProject" value="../${uiProjectName}"/>
	
	<property name="javaModelDirectory" value="${mdProject}/src-gen"/>
	<property name="xmiModelDirectory" value="${mdProject}/model-gen"/>
	<property name="basePackage" value="org.eclipse.emf.compare"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup">
		<platformUri value="${rtProject}/.."/>
	</bean> 
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${javaModelDirectory}"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${xmiModelDirectory}"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${rtProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${uiProject}/src-gen"/>
	
	<component class="org.eclipse.emf.compare.epatch.dsl.util.Echo">
		<file value="${xmiModelDirectory}/readme.txt"/>
		<line value="Attention: The models in this directory have been generated automatically by"/>	
		<line value="${rtProjectName}"/>	
		<line value=""/>	
		<line value="Do not modify manually!"/>	
	</component>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${rtProject}"/>
		<pathUiProject value="${uiProject}"/>
		<projectNameRt value="${rtProjectName}"/>
		<projectNameUi value="${uiProjectName}"/>
		
		<!-- <language uri="${grammarURI}">
			<fragments file="org/eclipse/xtext/ui/generator/StandardUiAndRuntime.mwe" inheritAll="true">
				<file.extensions value="${file.extensions}"/>
			</fragments>
		</language> -->
				<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"
				basePackage="${basePackage}"
				xmiModelDirectory="${xmiModelDirectory}"
				javaModelDirectory="${javaModelDirectory}"
			/>
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- the following fragment tries to use the Antlr Generator fragment which can be downloaded from http://www.itemis.com 
			     and falls back to the packrat parser if it's not available. -->
			<fragment class="org.eclipse.xtext.generator.DelegatingGeneratorFragment" 
				delegate="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment"
				message="You are generating without ANTLR. It is highly recommended to download and use the plugin 'de.itemis.xtext.antlr' \n\t using the update site http://xtext.itemis.com/updates/milestones.">
				<fallback class="org.eclipse.xtext.generator.parser.PackratParserFragment"/>
			</fragment>
	
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
			
            
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.JavaScopingFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>

			
			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			
		</language>
	</component>
	
</workflow>

/*
* generated by Xtext
*/
package org.eclipse.emf.compare.epatch.dsl.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchEpatchConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchModelImportConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchResourceImportConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchEPackageImportConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchNamedResourceConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchNamedObjectConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchObjectRefConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchCreatedObjectConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchAssignmentConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchBiSingleAssignmentConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchBiListAssignmentConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchMonoSingleAssignmentConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchMonoListAssignmentConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchAssignmentValueConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchListAssignmentValueConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchSingleAssignmentValueConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchObjectNewConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchObjectCopyConsumer;
import org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers.EpatchFRAGMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class EpatchParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private EpatchEpatchConsumer epatchConsumer;
    private EpatchModelImportConsumer modelImportConsumer;
    private EpatchResourceImportConsumer resourceImportConsumer;
    private EpatchEPackageImportConsumer ePackageImportConsumer;
    private EpatchNamedResourceConsumer namedResourceConsumer;
    private EpatchNamedObjectConsumer namedObjectConsumer;
    private EpatchObjectRefConsumer objectRefConsumer;
    private EpatchCreatedObjectConsumer createdObjectConsumer;
    private EpatchAssignmentConsumer assignmentConsumer;
    private EpatchBiSingleAssignmentConsumer biSingleAssignmentConsumer;
    private EpatchBiListAssignmentConsumer biListAssignmentConsumer;
    private EpatchMonoSingleAssignmentConsumer monoSingleAssignmentConsumer;
    private EpatchMonoListAssignmentConsumer monoListAssignmentConsumer;
    private EpatchAssignmentValueConsumer assignmentValueConsumer;
    private EpatchListAssignmentValueConsumer listAssignmentValueConsumer;
    private EpatchSingleAssignmentValueConsumer singleAssignmentValueConsumer;
    private EpatchObjectNewConsumer objectNewConsumer;
    private EpatchObjectCopyConsumer objectCopyConsumer;
    private EpatchFRAGMENTConsumer fragmentConsumer;

	private EpatchGrammarAccess grammarAccess;

	public EpatchParserConfiguration(IInternalParserConfiguration configuration, EpatchGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public EpatchEpatchConsumer getRootConsumer() {
		return epatchConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		epatchConsumer = new EpatchEpatchConsumer(
    		this, null
    	);
		modelImportConsumer = new EpatchModelImportConsumer(
    		this, null
    	);
		resourceImportConsumer = new EpatchResourceImportConsumer(
    		this, null
    	);
		ePackageImportConsumer = new EpatchEPackageImportConsumer(
    		this, null
    	);
		namedResourceConsumer = new EpatchNamedResourceConsumer(
    		this, null
    	);
		namedObjectConsumer = new EpatchNamedObjectConsumer(
    		this, null
    	);
		objectRefConsumer = new EpatchObjectRefConsumer(
    		this, null
    	);
		createdObjectConsumer = new EpatchCreatedObjectConsumer(
    		this, null
    	);
		assignmentConsumer = new EpatchAssignmentConsumer(
    		this, null
    	);
		biSingleAssignmentConsumer = new EpatchBiSingleAssignmentConsumer(
    		this, null
    	);
		biListAssignmentConsumer = new EpatchBiListAssignmentConsumer(
    		this, null
    	);
		monoSingleAssignmentConsumer = new EpatchMonoSingleAssignmentConsumer(
    		this, null
    	);
		monoListAssignmentConsumer = new EpatchMonoListAssignmentConsumer(
    		this, null
    	);
		assignmentValueConsumer = new EpatchAssignmentValueConsumer(
    		this, null
    	);
		listAssignmentValueConsumer = new EpatchListAssignmentValueConsumer(
    		this, null
    	);
		singleAssignmentValueConsumer = new EpatchSingleAssignmentValueConsumer(
    		this, null
    	);
		objectNewConsumer = new EpatchObjectNewConsumer(
    		this, null
    	);
		objectCopyConsumer = new EpatchObjectCopyConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
		fragmentConsumer = new EpatchFRAGMENTConsumer(this);
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getEpatchConsumer().setRule(grammarAccess.getEpatchAccess());
		getModelImportConsumer().setRule(grammarAccess.getModelImportAccess());
		getResourceImportConsumer().setRule(grammarAccess.getResourceImportAccess());
		getEPackageImportConsumer().setRule(grammarAccess.getEPackageImportAccess());
		getNamedResourceConsumer().setRule(grammarAccess.getNamedResourceAccess());
		getNamedObjectConsumer().setRule(grammarAccess.getNamedObjectAccess());
		getObjectRefConsumer().setRule(grammarAccess.getObjectRefAccess());
		getCreatedObjectConsumer().setRule(grammarAccess.getCreatedObjectAccess());
		getAssignmentConsumer().setRule(grammarAccess.getAssignmentAccess());
		getBiSingleAssignmentConsumer().setRule(grammarAccess.getBiSingleAssignmentAccess());
		getBiListAssignmentConsumer().setRule(grammarAccess.getBiListAssignmentAccess());
		getMonoSingleAssignmentConsumer().setRule(grammarAccess.getMonoSingleAssignmentAccess());
		getMonoListAssignmentConsumer().setRule(grammarAccess.getMonoListAssignmentAccess());
		getAssignmentValueConsumer().setRule(grammarAccess.getAssignmentValueAccess());
		getListAssignmentValueConsumer().setRule(grammarAccess.getListAssignmentValueAccess());
		getSingleAssignmentValueConsumer().setRule(grammarAccess.getSingleAssignmentValueAccess());
		getObjectNewConsumer().setRule(grammarAccess.getObjectNewAccess());
		getObjectCopyConsumer().setRule(grammarAccess.getObjectCopyAccess());
		getFragmentConsumer().setRule(grammarAccess.getFRAGMENTRule());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getEpatchConsumer().setIdConsumer(getIdConsumer());
		getEpatchConsumer().setModelImportConsumer(getModelImportConsumer());
		getEpatchConsumer().setNamedResourceConsumer(getNamedResourceConsumer());
		getEpatchConsumer().setObjectRefConsumer(getObjectRefConsumer());

		getModelImportConsumer().setEPackageImportConsumer(getEPackageImportConsumer());
		getModelImportConsumer().setResourceImportConsumer(getResourceImportConsumer());

		getResourceImportConsumer().setIdConsumer(getIdConsumer());
		getResourceImportConsumer().setStringConsumer(getStringConsumer());

		getEPackageImportConsumer().setIdConsumer(getIdConsumer());
		getEPackageImportConsumer().setStringConsumer(getStringConsumer());

		getNamedResourceConsumer().setCreatedObjectConsumer(getCreatedObjectConsumer());
		getNamedResourceConsumer().setIdConsumer(getIdConsumer());
		getNamedResourceConsumer().setStringConsumer(getStringConsumer());

		getNamedObjectConsumer().setCreatedObjectConsumer(getCreatedObjectConsumer());
		getNamedObjectConsumer().setObjectRefConsumer(getObjectRefConsumer());

		getObjectRefConsumer().setBiListAssignmentConsumer(getBiListAssignmentConsumer());
		getObjectRefConsumer().setBiSingleAssignmentConsumer(getBiSingleAssignmentConsumer());
		getObjectRefConsumer().setFragmentConsumer(getFragmentConsumer());
		getObjectRefConsumer().setIdConsumer(getIdConsumer());

		getCreatedObjectConsumer().setObjectCopyConsumer(getObjectCopyConsumer());
		getCreatedObjectConsumer().setObjectNewConsumer(getObjectNewConsumer());

		getAssignmentConsumer().setBiListAssignmentConsumer(getBiListAssignmentConsumer());
		getAssignmentConsumer().setBiSingleAssignmentConsumer(getBiSingleAssignmentConsumer());
		getAssignmentConsumer().setMonoListAssignmentConsumer(getMonoListAssignmentConsumer());
		getAssignmentConsumer().setMonoSingleAssignmentConsumer(getMonoSingleAssignmentConsumer());

		getBiSingleAssignmentConsumer().setIdConsumer(getIdConsumer());
		getBiSingleAssignmentConsumer().setSingleAssignmentValueConsumer(getSingleAssignmentValueConsumer());

		getBiListAssignmentConsumer().setIdConsumer(getIdConsumer());
		getBiListAssignmentConsumer().setListAssignmentValueConsumer(getListAssignmentValueConsumer());

		getMonoSingleAssignmentConsumer().setIdConsumer(getIdConsumer());
		getMonoSingleAssignmentConsumer().setSingleAssignmentValueConsumer(getSingleAssignmentValueConsumer());

		getMonoListAssignmentConsumer().setAssignmentValueConsumer(getAssignmentValueConsumer());
		getMonoListAssignmentConsumer().setIdConsumer(getIdConsumer());

		getAssignmentValueConsumer().setCreatedObjectConsumer(getCreatedObjectConsumer());
		getAssignmentValueConsumer().setFragmentConsumer(getFragmentConsumer());
		getAssignmentValueConsumer().setIdConsumer(getIdConsumer());
		getAssignmentValueConsumer().setIntConsumer(getIntConsumer());
		getAssignmentValueConsumer().setStringConsumer(getStringConsumer());

		getListAssignmentValueConsumer().setCreatedObjectConsumer(getCreatedObjectConsumer());
		getListAssignmentValueConsumer().setFragmentConsumer(getFragmentConsumer());
		getListAssignmentValueConsumer().setIdConsumer(getIdConsumer());
		getListAssignmentValueConsumer().setIntConsumer(getIntConsumer());
		getListAssignmentValueConsumer().setStringConsumer(getStringConsumer());

		getSingleAssignmentValueConsumer().setCreatedObjectConsumer(getCreatedObjectConsumer());
		getSingleAssignmentValueConsumer().setFragmentConsumer(getFragmentConsumer());
		getSingleAssignmentValueConsumer().setIdConsumer(getIdConsumer());
		getSingleAssignmentValueConsumer().setIntConsumer(getIntConsumer());
		getSingleAssignmentValueConsumer().setStringConsumer(getStringConsumer());

		getObjectNewConsumer().setFragmentConsumer(getFragmentConsumer());
		getObjectNewConsumer().setIdConsumer(getIdConsumer());
		getObjectNewConsumer().setMonoListAssignmentConsumer(getMonoListAssignmentConsumer());
		getObjectNewConsumer().setMonoSingleAssignmentConsumer(getMonoSingleAssignmentConsumer());

		getObjectCopyConsumer().setFragmentConsumer(getFragmentConsumer());
		getObjectCopyConsumer().setIdConsumer(getIdConsumer());
		getObjectCopyConsumer().setMonoListAssignmentConsumer(getMonoListAssignmentConsumer());
		getObjectCopyConsumer().setMonoSingleAssignmentConsumer(getMonoSingleAssignmentConsumer());

		getEpatchConsumer().setKeyword$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getEpatchConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getEpatchConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getEpatchConsumer().setRuleCall$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getResourceImportConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getResourceImportConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getResourceImportConsumer().setRuleCall$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getResourceImportConsumer().setRuleCall$7$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getEPackageImportConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getEPackageImportConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getEPackageImportConsumer().setRuleCall$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getEPackageImportConsumer().setRuleCall$7$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getNamedResourceConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getNamedResourceConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getNamedResourceConsumer().setKeyword$6$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getNamedResourceConsumer().setKeyword$9$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getNamedResourceConsumer().setKeyword$14$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getNamedResourceConsumer().setKeyword$15$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getNamedResourceConsumer().setKeyword$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getNamedResourceConsumer().setKeyword$23$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getNamedResourceConsumer().setKeyword$24$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getNamedResourceConsumer().setRuleCall$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getNamedResourceConsumer().setRuleCall$11$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getNamedResourceConsumer().setRuleCall$20$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectRefConsumer().setKeyword$35$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectRefConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getObjectRefConsumer().setKeyword$14$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getObjectRefConsumer().setKeyword$21$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getObjectRefConsumer().setKeyword$29$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectRefConsumer().setRuleCall$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectRefConsumer().setRuleCall$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectRefConsumer().setRuleCall$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectRefConsumer().setRuleCall$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectRefConsumer().setRuleCall$20$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectRefConsumer().setRuleCall$25$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectRefConsumer().setRuleCall$27$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getBiSingleAssignmentConsumer().setKeyword$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiSingleAssignmentConsumer().setKeyword$7$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiSingleAssignmentConsumer().setKeyword$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiSingleAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getBiListAssignmentConsumer().setKeyword$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$13$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$21$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setKeyword$22$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getBiListAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getMonoSingleAssignmentConsumer().setKeyword$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoSingleAssignmentConsumer().setKeyword$7$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoSingleAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getMonoListAssignmentConsumer().setKeyword$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoListAssignmentConsumer().setKeyword$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoListAssignmentConsumer().setKeyword$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoListAssignmentConsumer().setKeyword$13$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoListAssignmentConsumer().setKeyword$14$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getMonoListAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getAssignmentValueConsumer().setKeyword$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getAssignmentValueConsumer().setKeyword$14$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getAssignmentValueConsumer().setKeyword$17$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getAssignmentValueConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getAssignmentValueConsumer().setRuleCall$8$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getAssignmentValueConsumer().setRuleCall$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getAssignmentValueConsumer().setRuleCall$16$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getAssignmentValueConsumer().setRuleCall$24$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getAssignmentValueConsumer().setRuleCall$26$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getListAssignmentValueConsumer().setKeyword$4$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setKeyword$7$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setKeyword$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setKeyword$19$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setKeyword$23$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setKeyword$26$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$9$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$17$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$21$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$25$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$33$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getListAssignmentValueConsumer().setRuleCall$35$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getSingleAssignmentValueConsumer().setKeyword$3$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getSingleAssignmentValueConsumer().setKeyword$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getSingleAssignmentValueConsumer().setKeyword$16$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getSingleAssignmentValueConsumer().setKeyword$19$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$5$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$14$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$26$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getSingleAssignmentValueConsumer().setRuleCall$28$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectNewConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getObjectNewConsumer().setKeyword$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectNewConsumer().setKeyword$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectNewConsumer().setRuleCall$6$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectNewConsumer().setRuleCall$8$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectNewConsumer().setRuleCall$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectCopyConsumer().setKeyword$2$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$4$Delimiter);
		getObjectCopyConsumer().setKeyword$12$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectCopyConsumer().setKeyword$18$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.keyword$7$Delimiter);
		getObjectCopyConsumer().setRuleCall$6$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
		getObjectCopyConsumer().setRuleCall$8$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$28$Delimiter);
		getObjectCopyConsumer().setRuleCall$10$Delimiter(org.eclipse.emf.compare.epatch.dsl.parser.packrat.EpatchDelimiters.ruleCall$6$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public EpatchEpatchConsumer getEpatchConsumer() {
    	return epatchConsumer;
    }

    public EpatchModelImportConsumer getModelImportConsumer() {
    	return modelImportConsumer;
    }

    public EpatchResourceImportConsumer getResourceImportConsumer() {
    	return resourceImportConsumer;
    }

    public EpatchEPackageImportConsumer getEPackageImportConsumer() {
    	return ePackageImportConsumer;
    }

    public EpatchNamedResourceConsumer getNamedResourceConsumer() {
    	return namedResourceConsumer;
    }

    public EpatchNamedObjectConsumer getNamedObjectConsumer() {
    	return namedObjectConsumer;
    }

    public EpatchObjectRefConsumer getObjectRefConsumer() {
    	return objectRefConsumer;
    }

    public EpatchCreatedObjectConsumer getCreatedObjectConsumer() {
    	return createdObjectConsumer;
    }

    public EpatchAssignmentConsumer getAssignmentConsumer() {
    	return assignmentConsumer;
    }

    public EpatchBiSingleAssignmentConsumer getBiSingleAssignmentConsumer() {
    	return biSingleAssignmentConsumer;
    }

    public EpatchBiListAssignmentConsumer getBiListAssignmentConsumer() {
    	return biListAssignmentConsumer;
    }

    public EpatchMonoSingleAssignmentConsumer getMonoSingleAssignmentConsumer() {
    	return monoSingleAssignmentConsumer;
    }

    public EpatchMonoListAssignmentConsumer getMonoListAssignmentConsumer() {
    	return monoListAssignmentConsumer;
    }

    public EpatchAssignmentValueConsumer getAssignmentValueConsumer() {
    	return assignmentValueConsumer;
    }

    public EpatchListAssignmentValueConsumer getListAssignmentValueConsumer() {
    	return listAssignmentValueConsumer;
    }

    public EpatchSingleAssignmentValueConsumer getSingleAssignmentValueConsumer() {
    	return singleAssignmentValueConsumer;
    }

    public EpatchObjectNewConsumer getObjectNewConsumer() {
    	return objectNewConsumer;
    }

    public EpatchObjectCopyConsumer getObjectCopyConsumer() {
    	return objectCopyConsumer;
    }

    public EpatchFRAGMENTConsumer getFragmentConsumer() {
    	return fragmentConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}

/*
 * generated by Xtext
 */
package org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess.BiSingleAssignmentElements;

public final class EpatchBiSingleAssignmentConsumer extends NonTerminalConsumer {

	private BiSingleAssignmentElements rule;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer singleAssignmentValueConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {

		protected Group$1$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {

		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "feature", false, false, getElement(),
					getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {

		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleAssignmentValueConsumer, "leftValue", false, false, false,
					getElement(), optional);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {

		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleAssignmentValueConsumer, "rightValue", false, false, false,
					getElement(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	public EpatchBiSingleAssignmentConsumer(INonTerminalConsumerConfiguration configuration,
			ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}

	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public BiSingleAssignmentElements getRule() {
		return rule;
	}

	public void setRule(BiSingleAssignmentElements rule) {
		this.rule = rule;

		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getFeatureAssignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getFeatureIDTerminalRuleCall_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getEqualsSignKeyword_1());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getLeftValueAssignment_2());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule
				.getLeftValueSingleAssignmentValueParserRuleCall_2_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getVerticalLineKeyword_3());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getRightValueAssignment_4());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule
				.getRightValueSingleAssignmentValueParserRuleCall_4_0());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getSemicolonKeyword_5());
	}

	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}

	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}

	public void setSingleAssignmentValueConsumer(INonTerminalConsumer singleAssignmentValueConsumer) {
		this.singleAssignmentValueConsumer = singleAssignmentValueConsumer;
	}

	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}

	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}

	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}

	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}

	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

}

/*
* generated by Xtext
*/
package org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess.SingleAssignmentValueElements;

public final class EpatchSingleAssignmentValueConsumer extends NonTerminalConsumer {

	private SingleAssignmentValueElements rule;	

	private INonTerminalConsumer createdObjectConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer crossReference$8$Consumer;

	private IElementConsumer group$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer group$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer group$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer crossReference$24$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer ruleCall$28$Consumer;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ISequenceMatcher ruleCall$5$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$14$Delimiter;

	private ISequenceMatcher ruleCall$18$Delimiter;

	private ISequenceMatcher ruleCall$26$Delimiter;

	private ISequenceMatcher ruleCall$28$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(group$6$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(group$22$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$3$Consumer;
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "keyword", false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$5$Delimiter(), optional);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$11$Consumer);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$8$Consumer;
		}
	}

	protected class CrossReference$8$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$8$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refObject", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Group$11$Consumer extends OptionalGroupConsumer {
		
		protected Group$11$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(group$15$Consumer);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refFeature", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	protected class Group$15$Consumer extends OptionalGroupConsumer {
		
		protected Group$15$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$16$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(keyword$19$Consumer);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(), getRuleCall$18$Delimiter(), optional);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(createdObjectConsumer, "newObject", false, false, false, getElement(), optional);
		}
	}

	protected class Group$22$Consumer extends GroupConsumer {
		
		protected Group$22$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(assignment$27$Consumer);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$24$Consumer;
		}
	}

	protected class CrossReference$24$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$24$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "import", false, false, getElement(), getRuleCall$26$Delimiter(), optional);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$28$Consumer;
		}
	}

	protected class RuleCall$28$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$28$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "impFrag", false, false, getElement(), getRuleCall$28$Delimiter(), optional);
		}
	}

	public EpatchSingleAssignmentValueConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$18$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$26$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$28$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public SingleAssignmentValueElements getRule() {
		return rule;
	}
	
	public void setRule(SingleAssignmentValueElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getKeywordAssignment_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getKeywordNullKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getValueAssignment_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getValueSTRINGTerminalRuleCall_1_0());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_2());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getRefObjectAssignment_2_0());
		crossReference$8$Consumer = new CrossReference$8$Consumer(rule.getRefObjectNamedObjectCrossReference_2_0_0());
		group$11$Consumer = new Group$11$Consumer(rule.getGroup_2_1());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getFullStopKeyword_2_1_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getRefFeatureAssignment_2_1_1());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getRefFeatureIDTerminalRuleCall_2_1_1_0());
		group$15$Consumer = new Group$15$Consumer(rule.getGroup_2_1_2());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getLeftSquareBracketKeyword_2_1_2_0());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.getRefIndexAssignment_2_1_2_1());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getRefIndexINTTerminalRuleCall_2_1_2_1_0());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getRightSquareBracketKeyword_2_1_2_2());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getNewObjectAssignment_3());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getNewObjectCreatedObjectParserRuleCall_3_0());
		group$22$Consumer = new Group$22$Consumer(rule.getGroup_4());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.getImportAssignment_4_0());
		crossReference$24$Consumer = new CrossReference$24$Consumer(rule.getImportImportCrossReference_4_0_0());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.getImpFragAssignment_4_1());
		ruleCall$28$Consumer = new RuleCall$28$Consumer(rule.getImpFragFRAGMENTTerminalRuleCall_4_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setCreatedObjectConsumer(INonTerminalConsumer createdObjectConsumer) {
		this.createdObjectConsumer = createdObjectConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$5$Delimiter() {
		return ruleCall$5$Delimiter;
	}
	
	public void setRuleCall$5$Delimiter(ISequenceMatcher matcher) {
		ruleCall$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$14$Delimiter() {
		return ruleCall$14$Delimiter;
	}
	
	public void setRuleCall$14$Delimiter(ISequenceMatcher matcher) {
		ruleCall$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$18$Delimiter() {
		return ruleCall$18$Delimiter;
	}
	
	public void setRuleCall$18$Delimiter(ISequenceMatcher matcher) {
		ruleCall$18$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$26$Delimiter() {
		return ruleCall$26$Delimiter;
	}
	
	public void setRuleCall$26$Delimiter(ISequenceMatcher matcher) {
		ruleCall$26$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$28$Delimiter() {
		return ruleCall$28$Delimiter;
	}
	
	public void setRuleCall$28$Delimiter(ISequenceMatcher matcher) {
		ruleCall$28$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}

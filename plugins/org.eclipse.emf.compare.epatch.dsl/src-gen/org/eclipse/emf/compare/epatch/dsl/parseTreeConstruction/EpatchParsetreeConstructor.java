/*
 * generated by Xtext
 */
package org.eclipse.emf.compare.epatch.dsl.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess;

import com.google.inject.Inject;

public class EpatchParsetreeConstructor extends AbstractParseTreeConstructor {

	@Inject
	private EpatchGrammarAccess grammarAccess;

	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if (inst.isInstanceOf(grammarAccess.getEpatchRule().getType().getClassifier())
				&& (s = new Epatch_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())
				&& (s = new Import_Alternatives(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getModelImportRule().getType().getClassifier())
				&& (s = new ModelImport_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getResourceImportRule().getType().getClassifier())
				&& (s = new ResourceImport_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getEPackageImportRule().getType().getClassifier())
				&& (s = new EPackageImport_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getJavaImportRule().getType().getClassifier())
				&& (s = new JavaImport_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getExtensionImportRule().getType().getClassifier())
				&& (s = new ExtensionImport_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getNamedResourceRule().getType().getClassifier())
				&& (s = new NamedResource_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getNamedObjectRule().getType().getClassifier())
				&& (s = new NamedObject_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getObjectRefRule().getType().getClassifier())
				&& (s = new ObjectRef_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())
				&& (s = new CreatedObject_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())
				&& (s = new Assignment_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getBiSingleAssignmentRule().getType().getClassifier())
				&& (s = new BiSingleAssignment_Group(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getBiListAssignmentRule().getType().getClassifier())
				&& (s = new BiListAssignment_Group(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getMonoSingleAssignmentRule().getType().getClassifier())
				&& (s = new MonoSingleAssignment_Group(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getMonoListAssignmentRule().getType().getClassifier())
				&& (s = new MonoListAssignment_Group(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getAssignmentValueRule().getType().getClassifier())
				&& (s = new AssignmentValue_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getListAssignmentValueRule().getType().getClassifier())
				&& (s = new ListAssignmentValue_Group(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getSingleAssignmentValueRule().getType().getClassifier())
				&& (s = new SingleAssignmentValue_Alternatives(inst, null).firstSolution()) != null
				&& isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getObjectNewRule().getType().getClassifier())
				&& (s = new ObjectNew_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		if (inst.isInstanceOf(grammarAccess.getObjectCopyRule().getType().getClassifier())
				&& (s = new ObjectCopy_Group(inst, null).firstSolution()) != null && isConsumed(s, null))
			return s;
		return null;
	}

	/************
	 * begin Rule Epatch **************** Epatch: "epatch" name=ID "{" (imports+=Import)*
	 * (resources+=NamedResource)* (objects+=ObjectRef)* "}";
	 **/

	// "epatch" name=ID "{" (imports+=Import)* (resources+=NamedResource)* (objects+=ObjectRef)* "}"
	protected class Epatch_Group extends GroupToken {

		public Epatch_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getEpatchAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new Epatch_6_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new Epatch_5_Assignment_objects(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new Epatch_4_Assignment_resources(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new Epatch_3_Assignment_imports(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						while (s4 != null) {
							Solution s5 = new Epatch_2_Keyword(s4.getCurrent(), s4.getPredecessor())
									.firstSolution();
							while (s5 != null) {
								Solution s6 = new Epatch_1_Assignment_name(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								while (s6 != null) {
									Solution s7 = new Epatch_0_Keyword_epatch(s6.getCurrent(), s6
											.getPredecessor()).firstSolution();
									if (s7 != null) {
										last = s7.getPredecessor();
										return s7;
									} else {
										s6 = s6.getPredecessor().nextSolution(this, s6);
									}
								}
								s5 = s5.getPredecessor().nextSolution(this, s5);
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "epatch"
	protected class Epatch_0_Keyword_epatch extends KeywordToken {

		public Epatch_0_Keyword_epatch(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getEpatchAccess().getEpatchKeyword_0();
		}
	}

	// name=ID
	protected class Epatch_1_Assignment_name extends AssignmentToken {

		public Epatch_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEpatchAccess().getNameAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getEpatchAccess().getNameIDTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "{"
	protected class Epatch_2_Keyword extends KeywordToken {

		public Epatch_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getEpatchAccess().getLeftCurlyBracketKeyword_2();
		}
	}

	// (imports+=Import)*
	protected class Epatch_3_Assignment_imports extends AssignmentToken {

		public Epatch_3_Assignment_imports(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEpatchAccess().getImportsAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("imports", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("imports");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
					Solution s = new Import_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// (resources+=NamedResource)*
	protected class Epatch_4_Assignment_resources extends AssignmentToken {

		public Epatch_4_Assignment_resources(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEpatchAccess().getResourcesAssignment_4();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("resources", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("resources");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getNamedResourceRule().getType().getClassifier())) {
					Solution s = new NamedResource_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// (objects+=ObjectRef)*
	protected class Epatch_5_Assignment_objects extends AssignmentToken {

		public Epatch_5_Assignment_objects(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEpatchAccess().getObjectsAssignment_5();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("objects", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("objects");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectRefRule().getType().getClassifier())) {
					Solution s = new ObjectRef_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "}"
	protected class Epatch_6_Keyword extends KeywordToken {

		public Epatch_6_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getEpatchAccess().getRightCurlyBracketKeyword_6();
		}
	}

	/************ end Rule Epatch ****************/

	/************
	 * begin Rule Import **************** Import: ModelImport|JavaImport|ExtensionImport;
	 **/

	// ModelImport|JavaImport|ExtensionImport
	protected class Import_Alternatives extends AlternativesToken {

		public Import_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getImportAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new Import_0_RuleCall_ModelImport(current, this);
				case 1:
					return new Import_1_RuleCall_JavaImport(current, this);
				case 2:
					return new Import_2_RuleCall_ExtensionImport(current, this);
				default:
					return null;
			}
		}
	}

	// ModelImport
	protected class Import_0_RuleCall_ModelImport extends RuleCallToken {

		public Import_0_RuleCall_ModelImport(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getImportAccess().getModelImportParserRuleCall_0();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ModelImport_Alternatives.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getModelImportRule().getType().getClassifier()))
				return null;
			return new ModelImport_Alternatives(current, this).firstSolution();
		}
	}

	// JavaImport
	protected class Import_1_RuleCall_JavaImport extends RuleCallToken {

		public Import_1_RuleCall_JavaImport(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getImportAccess().getJavaImportParserRuleCall_1();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(JavaImport_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getJavaImportRule().getType().getClassifier()))
				return null;
			return new JavaImport_Group(current, this).firstSolution();
		}
	}

	// ExtensionImport
	protected class Import_2_RuleCall_ExtensionImport extends RuleCallToken {

		public Import_2_RuleCall_ExtensionImport(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getImportAccess().getExtensionImportParserRuleCall_2();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ExtensionImport_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getExtensionImportRule().getType().getClassifier()))
				return null;
			return new ExtensionImport_Group(current, this).firstSolution();
		}
	}

	/************ end Rule Import ****************/

	/************
	 * begin Rule ModelImport **************** ModelImport: ResourceImport|EPackageImport;
	 **/

	// ResourceImport|EPackageImport
	protected class ModelImport_Alternatives extends AlternativesToken {

		public ModelImport_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getModelImportAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ModelImport_0_RuleCall_ResourceImport(current, this);
				case 1:
					return new ModelImport_1_RuleCall_EPackageImport(current, this);
				default:
					return null;
			}
		}
	}

	// ResourceImport
	protected class ModelImport_0_RuleCall_ResourceImport extends RuleCallToken {

		public ModelImport_0_RuleCall_ResourceImport(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getModelImportAccess().getResourceImportParserRuleCall_0();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ResourceImport_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getResourceImportRule().getType().getClassifier()))
				return null;
			return new ResourceImport_Group(current, this).firstSolution();
		}
	}

	// EPackageImport
	protected class ModelImport_1_RuleCall_EPackageImport extends RuleCallToken {

		public ModelImport_1_RuleCall_EPackageImport(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getModelImportAccess().getEPackageImportParserRuleCall_1();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(EPackageImport_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getEPackageImportRule().getType().getClassifier()))
				return null;
			return new EPackageImport_Group(current, this).firstSolution();
		}
	}

	/************ end Rule ModelImport ****************/

	/************
	 * begin Rule ResourceImport **************** ResourceImport: "import" name=ID "uri" uri=STRING;
	 **/

	// "import" name=ID "uri" uri=STRING
	protected class ResourceImport_Group extends GroupToken {

		public ResourceImport_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getResourceImportAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ResourceImport_3_Assignment_uri(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ResourceImport_2_Keyword_uri(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ResourceImport_1_Assignment_name(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new ResourceImport_0_Keyword_import(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "import"
	protected class ResourceImport_0_Keyword_import extends KeywordToken {

		public ResourceImport_0_Keyword_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getResourceImportAccess().getImportKeyword_0();
		}
	}

	// name=ID
	protected class ResourceImport_1_Assignment_name extends AssignmentToken {

		public ResourceImport_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getResourceImportAccess().getNameAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getResourceImportAccess().getNameIDTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "uri"
	protected class ResourceImport_2_Keyword_uri extends KeywordToken {

		public ResourceImport_2_Keyword_uri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getResourceImportAccess().getUriKeyword_2();
		}
	}

	// uri=STRING
	protected class ResourceImport_3_Assignment_uri extends AssignmentToken {

		public ResourceImport_3_Assignment_uri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getResourceImportAccess().getUriAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("uri", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("uri");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getResourceImportAccess().getUriSTRINGTerminalRuleCall_3_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule ResourceImport ****************/

	/************
	 * begin Rule EPackageImport **************** EPackageImport: "import" name=ID "ns" nsURI=STRING;
	 **/

	// "import" name=ID "ns" nsURI=STRING
	protected class EPackageImport_Group extends GroupToken {

		public EPackageImport_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getEPackageImportAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new EPackageImport_3_Assignment_nsURI(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new EPackageImport_2_Keyword_ns(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new EPackageImport_1_Assignment_name(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new EPackageImport_0_Keyword_import(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "import"
	protected class EPackageImport_0_Keyword_import extends KeywordToken {

		public EPackageImport_0_Keyword_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getEPackageImportAccess().getImportKeyword_0();
		}
	}

	// name=ID
	protected class EPackageImport_1_Assignment_name extends AssignmentToken {

		public EPackageImport_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEPackageImportAccess().getNameAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getEPackageImportAccess().getNameIDTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "ns"
	protected class EPackageImport_2_Keyword_ns extends KeywordToken {

		public EPackageImport_2_Keyword_ns(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getEPackageImportAccess().getNsKeyword_2();
		}
	}

	// nsURI=STRING
	protected class EPackageImport_3_Assignment_nsURI extends AssignmentToken {

		public EPackageImport_3_Assignment_nsURI(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getEPackageImportAccess().getNsURIAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("nsURI", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("nsURI");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getEPackageImportAccess().getNsURISTRINGTerminalRuleCall_3_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule EPackageImport ****************/

	/************
	 * begin Rule JavaImport **************** JavaImport: "import" "java" path+=ID ("." path+=ID)*;
	 **/

	// "import" "java" path+=ID ("." path+=ID)*
	protected class JavaImport_Group extends GroupToken {

		public JavaImport_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new JavaImport_3_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new JavaImport_2_Assignment_path(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new JavaImport_1_Keyword_java(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new JavaImport_0_Keyword_import(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "import"
	protected class JavaImport_0_Keyword_import extends KeywordToken {

		public JavaImport_0_Keyword_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getImportKeyword_0();
		}
	}

	// "java"
	protected class JavaImport_1_Keyword_java extends KeywordToken {

		public JavaImport_1_Keyword_java(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getJavaKeyword_1();
		}
	}

	// path+=ID
	protected class JavaImport_2_Assignment_path extends AssignmentToken {

		public JavaImport_2_Assignment_path(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getPathAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("path", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("path");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getJavaImportAccess().getPathIDTerminalRuleCall_2_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("." path+=ID)*
	protected class JavaImport_3_Group extends GroupToken {

		public JavaImport_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new JavaImport_3_1_Assignment_path(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new JavaImport_3_0_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// "."
	protected class JavaImport_3_0_Keyword extends KeywordToken {

		public JavaImport_3_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getFullStopKeyword_3_0();
		}
	}

	// path+=ID
	protected class JavaImport_3_1_Assignment_path extends AssignmentToken {

		public JavaImport_3_1_Assignment_path(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getJavaImportAccess().getPathAssignment_3_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("path", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("path");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getJavaImportAccess().getPathIDTerminalRuleCall_3_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule JavaImport ****************/

	/************
	 * begin Rule ExtensionImport **************** ExtensionImport: "import" "extension" path+=ID ("::"
	 * path+=ID)*;
	 **/

	// "import" "extension" path+=ID ("::" path+=ID)*
	protected class ExtensionImport_Group extends GroupToken {

		public ExtensionImport_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ExtensionImport_3_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ExtensionImport_2_Assignment_path(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ExtensionImport_1_Keyword_extension(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					while (s3 != null) {
						Solution s4 = new ExtensionImport_0_Keyword_import(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "import"
	protected class ExtensionImport_0_Keyword_import extends KeywordToken {

		public ExtensionImport_0_Keyword_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getImportKeyword_0();
		}
	}

	// "extension"
	protected class ExtensionImport_1_Keyword_extension extends KeywordToken {

		public ExtensionImport_1_Keyword_extension(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getExtensionKeyword_1();
		}
	}

	// path+=ID
	protected class ExtensionImport_2_Assignment_path extends AssignmentToken {

		public ExtensionImport_2_Assignment_path(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getPathAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("path", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("path");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getExtensionImportAccess().getPathIDTerminalRuleCall_2_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("::" path+=ID)*
	protected class ExtensionImport_3_Group extends GroupToken {

		public ExtensionImport_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ExtensionImport_3_1_Assignment_path(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ExtensionImport_3_0_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// "::"
	protected class ExtensionImport_3_0_Keyword extends KeywordToken {

		public ExtensionImport_3_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getColonColonKeyword_3_0();
		}
	}

	// path+=ID
	protected class ExtensionImport_3_1_Assignment_path extends AssignmentToken {

		public ExtensionImport_3_1_Assignment_path(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getExtensionImportAccess().getPathAssignment_3_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("path", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("path");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getExtensionImportAccess().getPathIDTerminalRuleCall_3_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule ExtensionImport ****************/

	/************
	 * begin Rule NamedResource **************** NamedResource: "resource" name=ID "{" "left" ("uri"
	 * leftUri=STRING|leftRoot=CreatedObject) ";" "right" ("uri" rightUri=STRING|rightRoot=CreatedObject) ";"
	 * "}";
	 **/

	// "resource" name=ID "{" "left" ("uri" leftUri=STRING|leftRoot=CreatedObject) ";" "right" ("uri"
	// rightUri=STRING|rightRoot=CreatedObject) ";" "}"
	protected class NamedResource_Group extends GroupToken {

		public NamedResource_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new NamedResource_9_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new NamedResource_8_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new NamedResource_7_Alternatives(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new NamedResource_6_Keyword_right(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						while (s4 != null) {
							Solution s5 = new NamedResource_5_Keyword(s4.getCurrent(), s4.getPredecessor())
									.firstSolution();
							while (s5 != null) {
								Solution s6 = new NamedResource_4_Alternatives(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								while (s6 != null) {
									Solution s7 = new NamedResource_3_Keyword_left(s6.getCurrent(), s6
											.getPredecessor()).firstSolution();
									while (s7 != null) {
										Solution s8 = new NamedResource_2_Keyword(s7.getCurrent(), s7
												.getPredecessor()).firstSolution();
										while (s8 != null) {
											Solution s9 = new NamedResource_1_Assignment_name(
													s8.getCurrent(), s8.getPredecessor()).firstSolution();
											while (s9 != null) {
												Solution s10 = new NamedResource_0_Keyword_resource(s9
														.getCurrent(), s9.getPredecessor()).firstSolution();
												if (s10 != null) {
													last = s10.getPredecessor();
													return s10;
												} else {
													s9 = s9.getPredecessor().nextSolution(this, s9);
												}
											}
											s8 = s8.getPredecessor().nextSolution(this, s8);
										}
										s7 = s7.getPredecessor().nextSolution(this, s7);
									}
									s6 = s6.getPredecessor().nextSolution(this, s6);
								}
								s5 = s5.getPredecessor().nextSolution(this, s5);
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "resource"
	protected class NamedResource_0_Keyword_resource extends KeywordToken {

		public NamedResource_0_Keyword_resource(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getResourceKeyword_0();
		}
	}

	// name=ID
	protected class NamedResource_1_Assignment_name extends AssignmentToken {

		public NamedResource_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getNameAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getNamedResourceAccess().getNameIDTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "{"
	protected class NamedResource_2_Keyword extends KeywordToken {

		public NamedResource_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getLeftCurlyBracketKeyword_2();
		}
	}

	// "left"
	protected class NamedResource_3_Keyword_left extends KeywordToken {

		public NamedResource_3_Keyword_left(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getLeftKeyword_3();
		}
	}

	// "uri" leftUri=STRING|leftRoot=CreatedObject
	protected class NamedResource_4_Alternatives extends AlternativesToken {

		public NamedResource_4_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getAlternatives_4();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new NamedResource_4_0_Group(current, this);
				case 1:
					return new NamedResource_4_1_Assignment_leftRoot(current, this);
				default:
					return null;
			}
		}
	}

	// "uri" leftUri=STRING
	protected class NamedResource_4_0_Group extends GroupToken {

		public NamedResource_4_0_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getGroup_4_0();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new NamedResource_4_0_1_Assignment_leftUri(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new NamedResource_4_0_0_Keyword_uri(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// "uri"
	protected class NamedResource_4_0_0_Keyword_uri extends KeywordToken {

		public NamedResource_4_0_0_Keyword_uri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getUriKeyword_4_0_0();
		}
	}

	// leftUri=STRING
	protected class NamedResource_4_0_1_Assignment_leftUri extends AssignmentToken {

		public NamedResource_4_0_1_Assignment_leftUri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getLeftUriAssignment_4_0_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftUri", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftUri");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getNamedResourceAccess().getLeftUriSTRINGTerminalRuleCall_4_0_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// leftRoot=CreatedObject
	protected class NamedResource_4_1_Assignment_leftRoot extends AssignmentToken {

		public NamedResource_4_1_Assignment_leftRoot(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getLeftRootAssignment_4_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftRoot", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftRoot");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())) {
					Solution s = new CreatedObject_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ";"
	protected class NamedResource_5_Keyword extends KeywordToken {

		public NamedResource_5_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getSemicolonKeyword_5();
		}
	}

	// "right"
	protected class NamedResource_6_Keyword_right extends KeywordToken {

		public NamedResource_6_Keyword_right(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getRightKeyword_6();
		}
	}

	// "uri" rightUri=STRING|rightRoot=CreatedObject
	protected class NamedResource_7_Alternatives extends AlternativesToken {

		public NamedResource_7_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getAlternatives_7();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new NamedResource_7_0_Group(current, this);
				case 1:
					return new NamedResource_7_1_Assignment_rightRoot(current, this);
				default:
					return null;
			}
		}
	}

	// "uri" rightUri=STRING
	protected class NamedResource_7_0_Group extends GroupToken {

		public NamedResource_7_0_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getGroup_7_0();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new NamedResource_7_0_1_Assignment_rightUri(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new NamedResource_7_0_0_Keyword_uri(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// "uri"
	protected class NamedResource_7_0_0_Keyword_uri extends KeywordToken {

		public NamedResource_7_0_0_Keyword_uri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getUriKeyword_7_0_0();
		}
	}

	// rightUri=STRING
	protected class NamedResource_7_0_1_Assignment_rightUri extends AssignmentToken {

		public NamedResource_7_0_1_Assignment_rightUri(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getRightUriAssignment_7_0_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightUri", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightUri");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getNamedResourceAccess().getRightUriSTRINGTerminalRuleCall_7_0_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// rightRoot=CreatedObject
	protected class NamedResource_7_1_Assignment_rightRoot extends AssignmentToken {

		public NamedResource_7_1_Assignment_rightRoot(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getRightRootAssignment_7_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightRoot", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightRoot");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())) {
					Solution s = new CreatedObject_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ";"
	protected class NamedResource_8_Keyword extends KeywordToken {

		public NamedResource_8_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getSemicolonKeyword_8();
		}
	}

	// "}"
	protected class NamedResource_9_Keyword extends KeywordToken {

		public NamedResource_9_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getNamedResourceAccess().getRightCurlyBracketKeyword_9();
		}
	}

	/************ end Rule NamedResource ****************/

	/************
	 * begin Rule NamedObject **************** NamedObject: ObjectRef|CreatedObject;
	 **/

	// ObjectRef|CreatedObject
	protected class NamedObject_Alternatives extends AlternativesToken {

		public NamedObject_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getNamedObjectAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new NamedObject_0_RuleCall_ObjectRef(current, this);
				case 1:
					return new NamedObject_1_RuleCall_CreatedObject(current, this);
				default:
					return null;
			}
		}
	}

	// ObjectRef
	protected class NamedObject_0_RuleCall_ObjectRef extends RuleCallToken {

		public NamedObject_0_RuleCall_ObjectRef(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getNamedObjectAccess().getObjectRefParserRuleCall_0();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ObjectRef_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getObjectRefRule().getType().getClassifier()))
				return null;
			return new ObjectRef_Group(current, this).firstSolution();
		}
	}

	// CreatedObject
	protected class NamedObject_1_RuleCall_CreatedObject extends RuleCallToken {

		public NamedObject_1_RuleCall_CreatedObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getNamedObjectAccess().getCreatedObjectParserRuleCall_1();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(CreatedObject_Alternatives.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier()))
				return null;
			return new CreatedObject_Alternatives(current, this).firstSolution();
		}
	}

	/************ end Rule NamedObject ****************/

	/************
	 * begin Rule ObjectRef **************** ObjectRef: "object" (name=ID)? (leftRes=[NamedResource]
	 * leftFrag=FRAGMENT|"left" leftRes=[NamedResource] leftFrag=FRAGMENT "right" rightRes=[NamedResource]
	 * rightFrag=FRAGMENT) ("{" (assignments+=BiSingleAssignment|assignments+=BiListAssignment)* "}")?;
	 **/

	// "object" (name=ID)? (leftRes=[NamedResource] leftFrag=FRAGMENT|"left" leftRes=[NamedResource]
	// leftFrag=FRAGMENT "right" rightRes=[NamedResource] rightFrag=FRAGMENT) ("{"
	// (assignments+=BiSingleAssignment|assignments+=BiListAssignment)* "}")?
	protected class ObjectRef_Group extends GroupToken {

		public ObjectRef_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectRef_3_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectRef_2_Alternatives(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectRef_1_Assignment_name(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new ObjectRef_0_Keyword_object(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "object"
	protected class ObjectRef_0_Keyword_object extends KeywordToken {

		public ObjectRef_0_Keyword_object(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getObjectKeyword_0();
		}
	}

	// (name=ID)?
	protected class ObjectRef_1_Assignment_name extends AssignmentToken {

		public ObjectRef_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getNameAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectRefAccess().getNameIDTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// leftRes=[NamedResource] leftFrag=FRAGMENT|"left" leftRes=[NamedResource] leftFrag=FRAGMENT "right"
	// rightRes=[NamedResource] rightFrag=FRAGMENT
	protected class ObjectRef_2_Alternatives extends AlternativesToken {

		public ObjectRef_2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getAlternatives_2();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ObjectRef_2_0_Group(current, this);
				case 1:
					return new ObjectRef_2_1_Group(current, this);
				default:
					return null;
			}
		}
	}

	// leftRes=[NamedResource] leftFrag=FRAGMENT
	protected class ObjectRef_2_0_Group extends GroupToken {

		public ObjectRef_2_0_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getGroup_2_0();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectRef_2_0_1_Assignment_leftFrag(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectRef_2_0_0_Assignment_leftRes(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// leftRes=[NamedResource]
	protected class ObjectRef_2_0_0_Assignment_leftRes extends AssignmentToken {

		public ObjectRef_2_0_0_Assignment_leftRes(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftResAssignment_2_0_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftRes", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftRes");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectRefAccess()
						.getLeftResNamedResourceCrossReference_2_0_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getObjectRefAccess()
							.getLeftResNamedResourceCrossReference_2_0_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// leftFrag=FRAGMENT
	protected class ObjectRef_2_0_1_Assignment_leftFrag extends AssignmentToken {

		public ObjectRef_2_0_1_Assignment_leftFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftFragAssignment_2_0_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectRefAccess().getLeftFragFRAGMENTTerminalRuleCall_2_0_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "left" leftRes=[NamedResource] leftFrag=FRAGMENT "right" rightRes=[NamedResource] rightFrag=FRAGMENT
	protected class ObjectRef_2_1_Group extends GroupToken {

		public ObjectRef_2_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getGroup_2_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectRef_2_1_5_Assignment_rightFrag(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectRef_2_1_4_Assignment_rightRes(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectRef_2_1_3_Keyword_right(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new ObjectRef_2_1_2_Assignment_leftFrag(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						while (s4 != null) {
							Solution s5 = new ObjectRef_2_1_1_Assignment_leftRes(s4.getCurrent(), s4
									.getPredecessor()).firstSolution();
							while (s5 != null) {
								Solution s6 = new ObjectRef_2_1_0_Keyword_left(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								if (s6 != null) {
									last = s6.getPredecessor();
									return s6;
								} else {
									s5 = s5.getPredecessor().nextSolution(this, s5);
								}
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "left"
	protected class ObjectRef_2_1_0_Keyword_left extends KeywordToken {

		public ObjectRef_2_1_0_Keyword_left(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftKeyword_2_1_0();
		}
	}

	// leftRes=[NamedResource]
	protected class ObjectRef_2_1_1_Assignment_leftRes extends AssignmentToken {

		public ObjectRef_2_1_1_Assignment_leftRes(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftResAssignment_2_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftRes", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftRes");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectRefAccess()
						.getLeftResNamedResourceCrossReference_2_1_1_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getObjectRefAccess()
							.getLeftResNamedResourceCrossReference_2_1_1_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// leftFrag=FRAGMENT
	protected class ObjectRef_2_1_2_Assignment_leftFrag extends AssignmentToken {

		public ObjectRef_2_1_2_Assignment_leftFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftFragAssignment_2_1_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectRefAccess().getLeftFragFRAGMENTTerminalRuleCall_2_1_2_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "right"
	protected class ObjectRef_2_1_3_Keyword_right extends KeywordToken {

		public ObjectRef_2_1_3_Keyword_right(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getRightKeyword_2_1_3();
		}
	}

	// rightRes=[NamedResource]
	protected class ObjectRef_2_1_4_Assignment_rightRes extends AssignmentToken {

		public ObjectRef_2_1_4_Assignment_rightRes(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getRightResAssignment_2_1_4();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightRes", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightRes");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectRefAccess()
						.getRightResNamedResourceCrossReference_2_1_4_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getObjectRefAccess()
							.getRightResNamedResourceCrossReference_2_1_4_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// rightFrag=FRAGMENT
	protected class ObjectRef_2_1_5_Assignment_rightFrag extends AssignmentToken {

		public ObjectRef_2_1_5_Assignment_rightFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getRightFragAssignment_2_1_5();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectRefAccess().getRightFragFRAGMENTTerminalRuleCall_2_1_5_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("{" (assignments+=BiSingleAssignment|assignments+=BiListAssignment)* "}")?
	protected class ObjectRef_3_Group extends GroupToken {

		public ObjectRef_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectRef_3_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectRef_3_1_Alternatives(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectRef_3_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "{"
	protected class ObjectRef_3_0_Keyword extends KeywordToken {

		public ObjectRef_3_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getLeftCurlyBracketKeyword_3_0();
		}
	}

	// (assignments+=BiSingleAssignment|assignments+=BiListAssignment)*
	protected class ObjectRef_3_1_Alternatives extends AlternativesToken {

		public ObjectRef_3_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getAlternatives_3_1();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ObjectRef_3_1_0_Assignment_assignments(current, this);
				case 1:
					return new ObjectRef_3_1_1_Assignment_assignments(current, this);
				default:
					return null;
			}
		}
	}

	// assignments+=BiSingleAssignment
	protected class ObjectRef_3_1_0_Assignment_assignments extends AssignmentToken {

		public ObjectRef_3_1_0_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getAssignmentsAssignment_3_1_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getBiSingleAssignmentRule().getType().getClassifier())) {
					Solution s = new BiSingleAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// assignments+=BiListAssignment
	protected class ObjectRef_3_1_1_Assignment_assignments extends AssignmentToken {

		public ObjectRef_3_1_1_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getAssignmentsAssignment_3_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getBiListAssignmentRule().getType().getClassifier())) {
					Solution s = new BiListAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "}"
	protected class ObjectRef_3_2_Keyword extends KeywordToken {

		public ObjectRef_3_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectRefAccess().getRightCurlyBracketKeyword_3_2();
		}
	}

	/************ end Rule ObjectRef ****************/

	/************
	 * begin Rule CreatedObject **************** CreatedObject: ObjectNew|ObjectCopy;
	 **/

	// ObjectNew|ObjectCopy
	protected class CreatedObject_Alternatives extends AlternativesToken {

		public CreatedObject_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getCreatedObjectAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new CreatedObject_0_RuleCall_ObjectNew(current, this);
				case 1:
					return new CreatedObject_1_RuleCall_ObjectCopy(current, this);
				default:
					return null;
			}
		}
	}

	// ObjectNew
	protected class CreatedObject_0_RuleCall_ObjectNew extends RuleCallToken {

		public CreatedObject_0_RuleCall_ObjectNew(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getCreatedObjectAccess().getObjectNewParserRuleCall_0();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ObjectNew_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getObjectNewRule().getType().getClassifier()))
				return null;
			return new ObjectNew_Group(current, this).firstSolution();
		}
	}

	// ObjectCopy
	protected class CreatedObject_1_RuleCall_ObjectCopy extends RuleCallToken {

		public CreatedObject_1_RuleCall_ObjectCopy(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getCreatedObjectAccess().getObjectCopyParserRuleCall_1();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(ObjectCopy_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getObjectCopyRule().getType().getClassifier()))
				return null;
			return new ObjectCopy_Group(current, this).firstSolution();
		}
	}

	/************ end Rule CreatedObject ****************/

	/************
	 * begin Rule Assignment **************** Assignment:
	 * BiSingleAssignment|BiListAssignment|MonoSingleAssignment|MonoListAssignment;
	 **/

	// BiSingleAssignment|BiListAssignment|MonoSingleAssignment|MonoListAssignment
	protected class Assignment_Alternatives extends AlternativesToken {

		public Assignment_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getAssignmentAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new Assignment_0_RuleCall_BiSingleAssignment(current, this);
				case 1:
					return new Assignment_1_RuleCall_BiListAssignment(current, this);
				case 2:
					return new Assignment_2_RuleCall_MonoSingleAssignment(current, this);
				case 3:
					return new Assignment_3_RuleCall_MonoListAssignment(current, this);
				default:
					return null;
			}
		}
	}

	// BiSingleAssignment
	protected class Assignment_0_RuleCall_BiSingleAssignment extends RuleCallToken {

		public Assignment_0_RuleCall_BiSingleAssignment(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getAssignmentAccess().getBiSingleAssignmentParserRuleCall_0();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(BiSingleAssignment_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getBiSingleAssignmentRule().getType().getClassifier()))
				return null;
			return new BiSingleAssignment_Group(current, this).firstSolution();
		}
	}

	// BiListAssignment
	protected class Assignment_1_RuleCall_BiListAssignment extends RuleCallToken {

		public Assignment_1_RuleCall_BiListAssignment(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getAssignmentAccess().getBiListAssignmentParserRuleCall_1();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(BiListAssignment_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getBiListAssignmentRule().getType().getClassifier()))
				return null;
			return new BiListAssignment_Group(current, this).firstSolution();
		}
	}

	// MonoSingleAssignment
	protected class Assignment_2_RuleCall_MonoSingleAssignment extends RuleCallToken {

		public Assignment_2_RuleCall_MonoSingleAssignment(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getAssignmentAccess().getMonoSingleAssignmentParserRuleCall_2();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(MonoSingleAssignment_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getMonoSingleAssignmentRule().getType().getClassifier()))
				return null;
			return new MonoSingleAssignment_Group(current, this).firstSolution();
		}
	}

	// MonoListAssignment
	protected class Assignment_3_RuleCall_MonoListAssignment extends RuleCallToken {

		public Assignment_3_RuleCall_MonoListAssignment(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public RuleCall getGrammarElement() {
			return grammarAccess.getAssignmentAccess().getMonoListAssignmentParserRuleCall_3();
		}

		@Override
		protected Solution createSolution() {
			if (checkForRecursion(MonoListAssignment_Group.class, current))
				return null;
			if (!current.isInstanceOf(grammarAccess.getMonoListAssignmentRule().getType().getClassifier()))
				return null;
			return new MonoListAssignment_Group(current, this).firstSolution();
		}
	}

	/************ end Rule Assignment ****************/

	/************
	 * begin Rule BiSingleAssignment **************** BiSingleAssignment returns SingleAssignment: feature=ID
	 * "=" leftValue=SingleAssignmentValue "|" rightValue=SingleAssignmentValue ";";
	 **/

	// feature=ID "=" leftValue=SingleAssignmentValue "|" rightValue=SingleAssignmentValue ";"
	protected class BiSingleAssignment_Group extends GroupToken {

		public BiSingleAssignment_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiSingleAssignment_5_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiSingleAssignment_4_Assignment_rightValue(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new BiSingleAssignment_3_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new BiSingleAssignment_2_Assignment_leftValue(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						while (s4 != null) {
							Solution s5 = new BiSingleAssignment_1_Keyword(s4.getCurrent(), s4
									.getPredecessor()).firstSolution();
							while (s5 != null) {
								Solution s6 = new BiSingleAssignment_0_Assignment_feature(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								if (s6 != null) {
									last = s6.getPredecessor();
									return s6;
								} else {
									s5 = s5.getPredecessor().nextSolution(this, s5);
								}
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// feature=ID
	protected class BiSingleAssignment_0_Assignment_feature extends AssignmentToken {

		public BiSingleAssignment_0_Assignment_feature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getFeatureAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("feature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("feature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getBiSingleAssignmentAccess().getFeatureIDTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "="
	protected class BiSingleAssignment_1_Keyword extends KeywordToken {

		public BiSingleAssignment_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getEqualsSignKeyword_1();
		}
	}

	// leftValue=SingleAssignmentValue
	protected class BiSingleAssignment_2_Assignment_leftValue extends AssignmentToken {

		public BiSingleAssignment_2_Assignment_leftValue(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getLeftValueAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValue", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValue");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param
						.isInstanceOf(grammarAccess.getSingleAssignmentValueRule().getType().getClassifier())) {
					Solution s = new SingleAssignmentValue_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "|"
	protected class BiSingleAssignment_3_Keyword extends KeywordToken {

		public BiSingleAssignment_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getVerticalLineKeyword_3();
		}
	}

	// rightValue=SingleAssignmentValue
	protected class BiSingleAssignment_4_Assignment_rightValue extends AssignmentToken {

		public BiSingleAssignment_4_Assignment_rightValue(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getRightValueAssignment_4();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightValue", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightValue");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param
						.isInstanceOf(grammarAccess.getSingleAssignmentValueRule().getType().getClassifier())) {
					Solution s = new SingleAssignmentValue_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ";"
	protected class BiSingleAssignment_5_Keyword extends KeywordToken {

		public BiSingleAssignment_5_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiSingleAssignmentAccess().getSemicolonKeyword_5();
		}
	}

	/************ end Rule BiSingleAssignment ****************/

	/************
	 * begin Rule BiListAssignment **************** BiListAssignment returns ListAssignment: feature=ID "="
	 * "[" (leftValues+=ListAssignmentValue ("," leftValues+=ListAssignmentValue)*)? "|"
	 * (rightValues+=ListAssignmentValue ("," rightValues+=ListAssignmentValue)*)? "]" ";";
	 **/

	// feature=ID "=" "[" (leftValues+=ListAssignmentValue ("," leftValues+=ListAssignmentValue)*)? "|"
	// (rightValues+=ListAssignmentValue ("," rightValues+=ListAssignmentValue)*)? "]" ";"
	protected class BiListAssignment_Group extends GroupToken {

		public BiListAssignment_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiListAssignment_7_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiListAssignment_6_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new BiListAssignment_5_Group(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new BiListAssignment_4_Keyword(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						while (s4 != null) {
							Solution s5 = new BiListAssignment_3_Group(s4.getCurrent(), s4.getPredecessor())
									.firstSolution();
							while (s5 != null) {
								Solution s6 = new BiListAssignment_2_Keyword(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								while (s6 != null) {
									Solution s7 = new BiListAssignment_1_Keyword(s6.getCurrent(), s6
											.getPredecessor()).firstSolution();
									while (s7 != null) {
										Solution s8 = new BiListAssignment_0_Assignment_feature(s7
												.getCurrent(), s7.getPredecessor()).firstSolution();
										if (s8 != null) {
											last = s8.getPredecessor();
											return s8;
										} else {
											s7 = s7.getPredecessor().nextSolution(this, s7);
										}
									}
									s6 = s6.getPredecessor().nextSolution(this, s6);
								}
								s5 = s5.getPredecessor().nextSolution(this, s5);
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// feature=ID
	protected class BiListAssignment_0_Assignment_feature extends AssignmentToken {

		public BiListAssignment_0_Assignment_feature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getFeatureAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("feature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("feature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getBiListAssignmentAccess().getFeatureIDTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "="
	protected class BiListAssignment_1_Keyword extends KeywordToken {

		public BiListAssignment_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getEqualsSignKeyword_1();
		}
	}

	// "["
	protected class BiListAssignment_2_Keyword extends KeywordToken {

		public BiListAssignment_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getLeftSquareBracketKeyword_2();
		}
	}

	// (leftValues+=ListAssignmentValue ("," leftValues+=ListAssignmentValue)*)?
	protected class BiListAssignment_3_Group extends GroupToken {

		public BiListAssignment_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiListAssignment_3_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiListAssignment_3_0_Assignment_leftValues(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// leftValues+=ListAssignmentValue
	protected class BiListAssignment_3_0_Assignment_leftValues extends AssignmentToken {

		public BiListAssignment_3_0_Assignment_leftValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getLeftValuesAssignment_3_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValues", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueRule().getType().getClassifier())) {
					Solution s = new ListAssignmentValue_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ("," leftValues+=ListAssignmentValue)*
	protected class BiListAssignment_3_1_Group extends GroupToken {

		public BiListAssignment_3_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getGroup_3_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiListAssignment_3_1_1_Assignment_leftValues(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiListAssignment_3_1_0_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ","
	protected class BiListAssignment_3_1_0_Keyword extends KeywordToken {

		public BiListAssignment_3_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getCommaKeyword_3_1_0();
		}
	}

	// leftValues+=ListAssignmentValue
	protected class BiListAssignment_3_1_1_Assignment_leftValues extends AssignmentToken {

		public BiListAssignment_3_1_1_Assignment_leftValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getLeftValuesAssignment_3_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValues", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueRule().getType().getClassifier())) {
					Solution s = new ListAssignmentValue_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "|"
	protected class BiListAssignment_4_Keyword extends KeywordToken {

		public BiListAssignment_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getVerticalLineKeyword_4();
		}
	}

	// (rightValues+=ListAssignmentValue ("," rightValues+=ListAssignmentValue)*)?
	protected class BiListAssignment_5_Group extends GroupToken {

		public BiListAssignment_5_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getGroup_5();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiListAssignment_5_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiListAssignment_5_0_Assignment_rightValues(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// rightValues+=ListAssignmentValue
	protected class BiListAssignment_5_0_Assignment_rightValues extends AssignmentToken {

		public BiListAssignment_5_0_Assignment_rightValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getRightValuesAssignment_5_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightValues", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueRule().getType().getClassifier())) {
					Solution s = new ListAssignmentValue_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ("," rightValues+=ListAssignmentValue)*
	protected class BiListAssignment_5_1_Group extends GroupToken {

		public BiListAssignment_5_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getGroup_5_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new BiListAssignment_5_1_1_Assignment_rightValues(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new BiListAssignment_5_1_0_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ","
	protected class BiListAssignment_5_1_0_Keyword extends KeywordToken {

		public BiListAssignment_5_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getCommaKeyword_5_1_0();
		}
	}

	// rightValues+=ListAssignmentValue
	protected class BiListAssignment_5_1_1_Assignment_rightValues extends AssignmentToken {

		public BiListAssignment_5_1_1_Assignment_rightValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getRightValuesAssignment_5_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("rightValues", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("rightValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueRule().getType().getClassifier())) {
					Solution s = new ListAssignmentValue_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "]"
	protected class BiListAssignment_6_Keyword extends KeywordToken {

		public BiListAssignment_6_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getRightSquareBracketKeyword_6();
		}
	}

	// ";"
	protected class BiListAssignment_7_Keyword extends KeywordToken {

		public BiListAssignment_7_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getBiListAssignmentAccess().getSemicolonKeyword_7();
		}
	}

	/************ end Rule BiListAssignment ****************/

	/************
	 * begin Rule MonoSingleAssignment **************** MonoSingleAssignment returns SingleAssignment:
	 * feature=ID "=" leftValue=SingleAssignmentValue ";";
	 **/

	// feature=ID "=" leftValue=SingleAssignmentValue ";"
	protected class MonoSingleAssignment_Group extends GroupToken {

		public MonoSingleAssignment_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getMonoSingleAssignmentAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new MonoSingleAssignment_3_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new MonoSingleAssignment_2_Assignment_leftValue(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new MonoSingleAssignment_1_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new MonoSingleAssignment_0_Assignment_feature(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						if (s4 != null) {
							last = s4.getPredecessor();
							return s4;
						} else {
							s3 = s3.getPredecessor().nextSolution(this, s3);
						}
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// feature=ID
	protected class MonoSingleAssignment_0_Assignment_feature extends AssignmentToken {

		public MonoSingleAssignment_0_Assignment_feature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getMonoSingleAssignmentAccess().getFeatureAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("feature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("feature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getMonoSingleAssignmentAccess().getFeatureIDTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "="
	protected class MonoSingleAssignment_1_Keyword extends KeywordToken {

		public MonoSingleAssignment_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoSingleAssignmentAccess().getEqualsSignKeyword_1();
		}
	}

	// leftValue=SingleAssignmentValue
	protected class MonoSingleAssignment_2_Assignment_leftValue extends AssignmentToken {

		public MonoSingleAssignment_2_Assignment_leftValue(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getMonoSingleAssignmentAccess().getLeftValueAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValue", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValue");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param
						.isInstanceOf(grammarAccess.getSingleAssignmentValueRule().getType().getClassifier())) {
					Solution s = new SingleAssignmentValue_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ";"
	protected class MonoSingleAssignment_3_Keyword extends KeywordToken {

		public MonoSingleAssignment_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoSingleAssignmentAccess().getSemicolonKeyword_3();
		}
	}

	/************ end Rule MonoSingleAssignment ****************/

	/************
	 * begin Rule MonoListAssignment **************** MonoListAssignment returns ListAssignment: feature=ID
	 * "=" "[" (leftValues+=AssignmentValue ("," leftValues+=AssignmentValue)*)? "]" ";";
	 **/

	// feature=ID "=" "[" (leftValues+=AssignmentValue ("," leftValues+=AssignmentValue)*)? "]" ";"
	protected class MonoListAssignment_Group extends GroupToken {

		public MonoListAssignment_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new MonoListAssignment_5_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new MonoListAssignment_4_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new MonoListAssignment_3_Group(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new MonoListAssignment_2_Keyword(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						while (s4 != null) {
							Solution s5 = new MonoListAssignment_1_Keyword(s4.getCurrent(), s4
									.getPredecessor()).firstSolution();
							while (s5 != null) {
								Solution s6 = new MonoListAssignment_0_Assignment_feature(s5.getCurrent(), s5
										.getPredecessor()).firstSolution();
								if (s6 != null) {
									last = s6.getPredecessor();
									return s6;
								} else {
									s5 = s5.getPredecessor().nextSolution(this, s5);
								}
							}
							s4 = s4.getPredecessor().nextSolution(this, s4);
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// feature=ID
	protected class MonoListAssignment_0_Assignment_feature extends AssignmentToken {

		public MonoListAssignment_0_Assignment_feature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getFeatureAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("feature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("feature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getMonoListAssignmentAccess().getFeatureIDTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "="
	protected class MonoListAssignment_1_Keyword extends KeywordToken {

		public MonoListAssignment_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getEqualsSignKeyword_1();
		}
	}

	// "["
	protected class MonoListAssignment_2_Keyword extends KeywordToken {

		public MonoListAssignment_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getLeftSquareBracketKeyword_2();
		}
	}

	// (leftValues+=AssignmentValue ("," leftValues+=AssignmentValue)*)?
	protected class MonoListAssignment_3_Group extends GroupToken {

		public MonoListAssignment_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new MonoListAssignment_3_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new MonoListAssignment_3_0_Assignment_leftValues(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// leftValues+=AssignmentValue
	protected class MonoListAssignment_3_0_Assignment_leftValues extends AssignmentToken {

		public MonoListAssignment_3_0_Assignment_leftValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getLeftValuesAssignment_3_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValues", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getAssignmentValueRule().getType().getClassifier())) {
					Solution s = new AssignmentValue_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ("," leftValues+=AssignmentValue)*
	protected class MonoListAssignment_3_1_Group extends GroupToken {

		public MonoListAssignment_3_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getGroup_3_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new MonoListAssignment_3_1_1_Assignment_leftValues(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new MonoListAssignment_3_1_0_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ","
	protected class MonoListAssignment_3_1_0_Keyword extends KeywordToken {

		public MonoListAssignment_3_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getCommaKeyword_3_1_0();
		}
	}

	// leftValues+=AssignmentValue
	protected class MonoListAssignment_3_1_1_Assignment_leftValues extends AssignmentToken {

		public MonoListAssignment_3_1_1_Assignment_leftValues(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getLeftValuesAssignment_3_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("leftValues", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("leftValues");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getAssignmentValueRule().getType().getClassifier())) {
					Solution s = new AssignmentValue_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "]"
	protected class MonoListAssignment_4_Keyword extends KeywordToken {

		public MonoListAssignment_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getRightSquareBracketKeyword_4();
		}
	}

	// ";"
	protected class MonoListAssignment_5_Keyword extends KeywordToken {

		public MonoListAssignment_5_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getMonoListAssignmentAccess().getSemicolonKeyword_5();
		}
	}

	/************ end Rule MonoListAssignment ****************/

	/************
	 * begin Rule AssignmentValue **************** AssignmentValue: value=STRING|refObject=[NamedObject] ("."
	 * refFeature=ID ("[" refIndex=INT "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT;
	 **/

	// value=STRING|refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT
	// "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT
	protected class AssignmentValue_Alternatives extends AlternativesToken {

		public AssignmentValue_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new AssignmentValue_0_Assignment_value(current, this);
				case 1:
					return new AssignmentValue_1_Group(current, this);
				case 2:
					return new AssignmentValue_2_Assignment_newObject(current, this);
				case 3:
					return new AssignmentValue_3_Group(current, this);
				default:
					return null;
			}
		}
	}

	// value=STRING
	protected class AssignmentValue_0_Assignment_value extends AssignmentToken {

		public AssignmentValue_0_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getValueAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("value", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("value");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getAssignmentValueAccess().getValueSTRINGTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class AssignmentValue_1_Group extends GroupToken {

		public AssignmentValue_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getGroup_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new AssignmentValue_1_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new AssignmentValue_1_0_Assignment_refObject(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// refObject=[NamedObject]
	protected class AssignmentValue_1_0_Assignment_refObject extends AssignmentToken {

		public AssignmentValue_1_0_Assignment_refObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getRefObjectAssignment_1_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refObject");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getAssignmentValueAccess()
						.getRefObjectNamedObjectCrossReference_1_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getAssignmentValueAccess()
							.getRefObjectNamedObjectCrossReference_1_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class AssignmentValue_1_1_Group extends GroupToken {

		public AssignmentValue_1_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getGroup_1_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new AssignmentValue_1_1_2_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new AssignmentValue_1_1_1_Assignment_refFeature(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new AssignmentValue_1_1_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "."
	protected class AssignmentValue_1_1_0_Keyword extends KeywordToken {

		public AssignmentValue_1_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getFullStopKeyword_1_1_0();
		}
	}

	// refFeature=ID
	protected class AssignmentValue_1_1_1_Assignment_refFeature extends AssignmentToken {

		public AssignmentValue_1_1_1_Assignment_refFeature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getRefFeatureAssignment_1_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refFeature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refFeature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getAssignmentValueAccess().getRefFeatureIDTerminalRuleCall_1_1_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("[" refIndex=INT "]")?
	protected class AssignmentValue_1_1_2_Group extends GroupToken {

		public AssignmentValue_1_1_2_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getGroup_1_1_2();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new AssignmentValue_1_1_2_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new AssignmentValue_1_1_2_1_Assignment_refIndex(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new AssignmentValue_1_1_2_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "["
	protected class AssignmentValue_1_1_2_0_Keyword extends KeywordToken {

		public AssignmentValue_1_1_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getLeftSquareBracketKeyword_1_1_2_0();
		}
	}

	// refIndex=INT
	protected class AssignmentValue_1_1_2_1_Assignment_refIndex extends AssignmentToken {

		public AssignmentValue_1_1_2_1_Assignment_refIndex(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getRefIndexAssignment_1_1_2_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refIndex", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refIndex");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getAssignmentValueAccess().getRefIndexINTTerminalRuleCall_1_1_2_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "]"
	protected class AssignmentValue_1_1_2_2_Keyword extends KeywordToken {

		public AssignmentValue_1_1_2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getRightSquareBracketKeyword_1_1_2_2();
		}
	}

	// newObject=CreatedObject
	protected class AssignmentValue_2_Assignment_newObject extends AssignmentToken {

		public AssignmentValue_2_Assignment_newObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getNewObjectAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("newObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("newObject");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())) {
					Solution s = new CreatedObject_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ^import=[Import] impFrag=FRAGMENT
	protected class AssignmentValue_3_Group extends GroupToken {

		public AssignmentValue_3_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getGroup_3();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new AssignmentValue_3_1_Assignment_impFrag(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new AssignmentValue_3_0_Assignment_import(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ^import=[Import]
	protected class AssignmentValue_3_0_Assignment_import extends AssignmentToken {

		public AssignmentValue_3_0_Assignment_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getImportAssignment_3_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("import", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("import");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getAssignmentValueAccess()
						.getImportImportCrossReference_3_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getAssignmentValueAccess().getImportImportCrossReference_3_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// impFrag=FRAGMENT
	protected class AssignmentValue_3_1_Assignment_impFrag extends AssignmentToken {

		public AssignmentValue_3_1_Assignment_impFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getAssignmentValueAccess().getImpFragAssignment_3_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("impFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("impFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getAssignmentValueAccess().getImpFragFRAGMENTTerminalRuleCall_3_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule AssignmentValue ****************/

	/************
	 * begin Rule ListAssignmentValue **************** ListAssignmentValue returns AssignmentValue: index=INT
	 * ":" ("[" refIndex=INT "]"|value=STRING|refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT
	 * "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT);
	 **/

	// index=INT ":" ("[" refIndex=INT "]"|value=STRING|refObject=[NamedObject] ("." refFeature=ID ("["
	// refIndex=INT "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT)
	protected class ListAssignmentValue_Group extends GroupToken {

		public ListAssignmentValue_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_Alternatives(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_1_Keyword(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ListAssignmentValue_0_Assignment_index(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// index=INT
	protected class ListAssignmentValue_0_Assignment_index extends AssignmentToken {

		public ListAssignmentValue_0_Assignment_index(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getIndexAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("index", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("index");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess().getIndexINTTerminalRuleCall_0_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ":"
	protected class ListAssignmentValue_1_Keyword extends KeywordToken {

		public ListAssignmentValue_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getColonKeyword_1();
		}
	}

	// "[" refIndex=INT "]"|value=STRING|refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT
	// "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT
	protected class ListAssignmentValue_2_Alternatives extends AlternativesToken {

		public ListAssignmentValue_2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getAlternatives_2();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ListAssignmentValue_2_0_Group(current, this);
				case 1:
					return new ListAssignmentValue_2_1_Assignment_value(current, this);
				case 2:
					return new ListAssignmentValue_2_2_Group(current, this);
				case 3:
					return new ListAssignmentValue_2_3_Assignment_newObject(current, this);
				case 4:
					return new ListAssignmentValue_2_4_Group(current, this);
				default:
					return null;
			}
		}
	}

	// "[" refIndex=INT "]"
	protected class ListAssignmentValue_2_0_Group extends GroupToken {

		public ListAssignmentValue_2_0_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup_2_0();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_0_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_2_0_1_Assignment_refIndex(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new ListAssignmentValue_2_0_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "["
	protected class ListAssignmentValue_2_0_0_Keyword extends KeywordToken {

		public ListAssignmentValue_2_0_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getLeftSquareBracketKeyword_2_0_0();
		}
	}

	// refIndex=INT
	protected class ListAssignmentValue_2_0_1_Assignment_refIndex extends AssignmentToken {

		public ListAssignmentValue_2_0_1_Assignment_refIndex(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRefIndexAssignment_2_0_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refIndex", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refIndex");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess()
						.getRefIndexINTTerminalRuleCall_2_0_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "]"
	protected class ListAssignmentValue_2_0_2_Keyword extends KeywordToken {

		public ListAssignmentValue_2_0_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRightSquareBracketKeyword_2_0_2();
		}
	}

	// value=STRING
	protected class ListAssignmentValue_2_1_Assignment_value extends AssignmentToken {

		public ListAssignmentValue_2_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getValueAssignment_2_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("value", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("value");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess().getValueSTRINGTerminalRuleCall_2_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class ListAssignmentValue_2_2_Group extends GroupToken {

		public ListAssignmentValue_2_2_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup_2_2();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_2_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_2_2_0_Assignment_refObject(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// refObject=[NamedObject]
	protected class ListAssignmentValue_2_2_0_Assignment_refObject extends AssignmentToken {

		public ListAssignmentValue_2_2_0_Assignment_refObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRefObjectAssignment_2_2_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refObject");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueAccess()
						.getRefObjectNamedObjectCrossReference_2_2_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getListAssignmentValueAccess()
							.getRefObjectNamedObjectCrossReference_2_2_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class ListAssignmentValue_2_2_1_Group extends GroupToken {

		public ListAssignmentValue_2_2_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup_2_2_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_2_1_2_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_2_2_1_1_Assignment_refFeature(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new ListAssignmentValue_2_2_1_0_Keyword(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "."
	protected class ListAssignmentValue_2_2_1_0_Keyword extends KeywordToken {

		public ListAssignmentValue_2_2_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getFullStopKeyword_2_2_1_0();
		}
	}

	// refFeature=ID
	protected class ListAssignmentValue_2_2_1_1_Assignment_refFeature extends AssignmentToken {

		public ListAssignmentValue_2_2_1_1_Assignment_refFeature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRefFeatureAssignment_2_2_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refFeature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refFeature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess()
						.getRefFeatureIDTerminalRuleCall_2_2_1_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("[" refIndex=INT "]")?
	protected class ListAssignmentValue_2_2_1_2_Group extends GroupToken {

		public ListAssignmentValue_2_2_1_2_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup_2_2_1_2();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_2_1_2_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_2_2_1_2_1_Assignment_refIndex(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new ListAssignmentValue_2_2_1_2_0_Keyword(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "["
	protected class ListAssignmentValue_2_2_1_2_0_Keyword extends KeywordToken {

		public ListAssignmentValue_2_2_1_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getLeftSquareBracketKeyword_2_2_1_2_0();
		}
	}

	// refIndex=INT
	protected class ListAssignmentValue_2_2_1_2_1_Assignment_refIndex extends AssignmentToken {

		public ListAssignmentValue_2_2_1_2_1_Assignment_refIndex(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRefIndexAssignment_2_2_1_2_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refIndex", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refIndex");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess()
						.getRefIndexINTTerminalRuleCall_2_2_1_2_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "]"
	protected class ListAssignmentValue_2_2_1_2_2_Keyword extends KeywordToken {

		public ListAssignmentValue_2_2_1_2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getRightSquareBracketKeyword_2_2_1_2_2();
		}
	}

	// newObject=CreatedObject
	protected class ListAssignmentValue_2_3_Assignment_newObject extends AssignmentToken {

		public ListAssignmentValue_2_3_Assignment_newObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getNewObjectAssignment_2_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("newObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("newObject");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())) {
					Solution s = new CreatedObject_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ^import=[Import] impFrag=FRAGMENT
	protected class ListAssignmentValue_2_4_Group extends GroupToken {

		public ListAssignmentValue_2_4_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getGroup_2_4();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ListAssignmentValue_2_4_1_Assignment_impFrag(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ListAssignmentValue_2_4_0_Assignment_import(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ^import=[Import]
	protected class ListAssignmentValue_2_4_0_Assignment_import extends AssignmentToken {

		public ListAssignmentValue_2_4_0_Assignment_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getImportAssignment_2_4_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("import", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("import");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getListAssignmentValueAccess()
						.getImportImportCrossReference_2_4_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getListAssignmentValueAccess()
							.getImportImportCrossReference_2_4_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// impFrag=FRAGMENT
	protected class ListAssignmentValue_2_4_1_Assignment_impFrag extends AssignmentToken {

		public ListAssignmentValue_2_4_1_Assignment_impFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getListAssignmentValueAccess().getImpFragAssignment_2_4_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("impFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("impFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getListAssignmentValueAccess()
						.getImpFragFRAGMENTTerminalRuleCall_2_4_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule ListAssignmentValue ****************/

	/************
	 * begin Rule SingleAssignmentValue **************** SingleAssignmentValue returns AssignmentValue:
	 * keyword="null"|value=STRING|refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT
	 * "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT;
	 **/

	// keyword="null"|value=STRING|refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT
	// "]")?)?|newObject=CreatedObject|^import=[Import] impFrag=FRAGMENT
	protected class SingleAssignmentValue_Alternatives extends AlternativesToken {

		public SingleAssignmentValue_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getAlternatives();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new SingleAssignmentValue_0_Assignment_keyword(current, this);
				case 1:
					return new SingleAssignmentValue_1_Assignment_value(current, this);
				case 2:
					return new SingleAssignmentValue_2_Group(current, this);
				case 3:
					return new SingleAssignmentValue_3_Assignment_newObject(current, this);
				case 4:
					return new SingleAssignmentValue_4_Group(current, this);
				default:
					return null;
			}
		}
	}

	// keyword="null"
	protected class SingleAssignmentValue_0_Assignment_keyword extends AssignmentToken {

		public SingleAssignmentValue_0_Assignment_keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getKeywordAssignment_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("keyword", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("keyword");

			if ("null".equals(value)) { // xtext::Keyword
				type = AssignmentType.KW;
				element = grammarAccess.getSingleAssignmentValueAccess().getKeywordNullKeyword_0_0();
				return new Solution(obj);
			}

			return null;
		}
	}

	// value=STRING
	protected class SingleAssignmentValue_1_Assignment_value extends AssignmentToken {

		public SingleAssignmentValue_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getValueAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("value", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("value");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getSingleAssignmentValueAccess().getValueSTRINGTerminalRuleCall_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// refObject=[NamedObject] ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class SingleAssignmentValue_2_Group extends GroupToken {

		public SingleAssignmentValue_2_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getGroup_2();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new SingleAssignmentValue_2_1_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new SingleAssignmentValue_2_0_Assignment_refObject(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// refObject=[NamedObject]
	protected class SingleAssignmentValue_2_0_Assignment_refObject extends AssignmentToken {

		public SingleAssignmentValue_2_0_Assignment_refObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getRefObjectAssignment_2_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refObject");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getSingleAssignmentValueAccess()
						.getRefObjectNamedObjectCrossReference_2_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getSingleAssignmentValueAccess()
							.getRefObjectNamedObjectCrossReference_2_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// ("." refFeature=ID ("[" refIndex=INT "]")?)?
	protected class SingleAssignmentValue_2_1_Group extends GroupToken {

		public SingleAssignmentValue_2_1_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getGroup_2_1();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new SingleAssignmentValue_2_1_2_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new SingleAssignmentValue_2_1_1_Assignment_refFeature(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new SingleAssignmentValue_2_1_0_Keyword(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "."
	protected class SingleAssignmentValue_2_1_0_Keyword extends KeywordToken {

		public SingleAssignmentValue_2_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getFullStopKeyword_2_1_0();
		}
	}

	// refFeature=ID
	protected class SingleAssignmentValue_2_1_1_Assignment_refFeature extends AssignmentToken {

		public SingleAssignmentValue_2_1_1_Assignment_refFeature(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getRefFeatureAssignment_2_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refFeature", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refFeature");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getSingleAssignmentValueAccess()
						.getRefFeatureIDTerminalRuleCall_2_1_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("[" refIndex=INT "]")?
	protected class SingleAssignmentValue_2_1_2_Group extends GroupToken {

		public SingleAssignmentValue_2_1_2_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getGroup_2_1_2();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new SingleAssignmentValue_2_1_2_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new SingleAssignmentValue_2_1_2_1_Assignment_refIndex(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				while (s2 != null) {
					Solution s3 = new SingleAssignmentValue_2_1_2_0_Keyword(s2.getCurrent(), s2
							.getPredecessor()).firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "["
	protected class SingleAssignmentValue_2_1_2_0_Keyword extends KeywordToken {

		public SingleAssignmentValue_2_1_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getLeftSquareBracketKeyword_2_1_2_0();
		}
	}

	// refIndex=INT
	protected class SingleAssignmentValue_2_1_2_1_Assignment_refIndex extends AssignmentToken {

		public SingleAssignmentValue_2_1_2_1_Assignment_refIndex(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getRefIndexAssignment_2_1_2_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("refIndex", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("refIndex");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getSingleAssignmentValueAccess()
						.getRefIndexINTTerminalRuleCall_2_1_2_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// "]"
	protected class SingleAssignmentValue_2_1_2_2_Keyword extends KeywordToken {

		public SingleAssignmentValue_2_1_2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getRightSquareBracketKeyword_2_1_2_2();
		}
	}

	// newObject=CreatedObject
	protected class SingleAssignmentValue_3_Assignment_newObject extends AssignmentToken {

		public SingleAssignmentValue_3_Assignment_newObject(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getNewObjectAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("newObject", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("newObject");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getCreatedObjectRule().getType().getClassifier())) {
					Solution s = new CreatedObject_Alternatives(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// ^import=[Import] impFrag=FRAGMENT
	protected class SingleAssignmentValue_4_Group extends GroupToken {

		public SingleAssignmentValue_4_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getGroup_4();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new SingleAssignmentValue_4_1_Assignment_impFrag(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new SingleAssignmentValue_4_0_Assignment_import(s1.getCurrent(), s1
						.getPredecessor()).firstSolution();
				if (s2 != null) {
					last = s2.getPredecessor();
					return s2;
				} else {
					s1 = s1.getPredecessor().nextSolution(this, s1);
				}
			}
			return null;
		}
	}

	// ^import=[Import]
	protected class SingleAssignmentValue_4_0_Assignment_import extends AssignmentToken {

		public SingleAssignmentValue_4_0_Assignment_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getImportAssignment_4_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("import", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("import");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getSingleAssignmentValueAccess()
						.getImportImportCrossReference_4_0_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getSingleAssignmentValueAccess()
							.getImportImportCrossReference_4_0_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// impFrag=FRAGMENT
	protected class SingleAssignmentValue_4_1_Assignment_impFrag extends AssignmentToken {

		public SingleAssignmentValue_4_1_Assignment_impFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getSingleAssignmentValueAccess().getImpFragAssignment_4_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("impFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("impFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getSingleAssignmentValueAccess()
						.getImpFragFRAGMENTTerminalRuleCall_4_1_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	/************ end Rule SingleAssignmentValue ****************/

	/************
	 * begin Rule ObjectNew **************** ObjectNew: "new" ^import=[Import] impFrag=FRAGMENT (name=ID)?
	 * ("{" (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?;
	 **/

	// "new" ^import=[Import] impFrag=FRAGMENT (name=ID)? ("{"
	// (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?
	protected class ObjectNew_Group extends GroupToken {

		public ObjectNew_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectNew_4_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectNew_3_Assignment_name(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectNew_2_Assignment_impFrag(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new ObjectNew_1_Assignment_import(s3.getCurrent(), s3.getPredecessor())
								.firstSolution();
						while (s4 != null) {
							Solution s5 = new ObjectNew_0_Keyword_new(s4.getCurrent(), s4.getPredecessor())
									.firstSolution();
							if (s5 != null) {
								last = s5.getPredecessor();
								return s5;
							} else {
								s4 = s4.getPredecessor().nextSolution(this, s4);
							}
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "new"
	protected class ObjectNew_0_Keyword_new extends KeywordToken {

		public ObjectNew_0_Keyword_new(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getNewKeyword_0();
		}
	}

	// ^import=[Import]
	protected class ObjectNew_1_Assignment_import extends AssignmentToken {

		public ObjectNew_1_Assignment_import(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getImportAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("import", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("import");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectNewAccess().getImportImportCrossReference_1_0()
						.getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getObjectNewAccess().getImportImportCrossReference_1_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// impFrag=FRAGMENT
	protected class ObjectNew_2_Assignment_impFrag extends AssignmentToken {

		public ObjectNew_2_Assignment_impFrag(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getImpFragAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("impFrag", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("impFrag");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectNewAccess().getImpFragFRAGMENTTerminalRuleCall_2_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// (name=ID)?
	protected class ObjectNew_3_Assignment_name extends AssignmentToken {

		public ObjectNew_3_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getNameAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectNewAccess().getNameIDTerminalRuleCall_3_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("{" (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?
	protected class ObjectNew_4_Group extends GroupToken {

		public ObjectNew_4_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getGroup_4();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectNew_4_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectNew_4_1_Alternatives(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectNew_4_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "{"
	protected class ObjectNew_4_0_Keyword extends KeywordToken {

		public ObjectNew_4_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getLeftCurlyBracketKeyword_4_0();
		}
	}

	// (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)*
	protected class ObjectNew_4_1_Alternatives extends AlternativesToken {

		public ObjectNew_4_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getAlternatives_4_1();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ObjectNew_4_1_0_Assignment_assignments(current, this);
				case 1:
					return new ObjectNew_4_1_1_Assignment_assignments(current, this);
				default:
					return null;
			}
		}
	}

	// assignments+=MonoSingleAssignment
	protected class ObjectNew_4_1_0_Assignment_assignments extends AssignmentToken {

		public ObjectNew_4_1_0_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getAssignmentsAssignment_4_1_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getMonoSingleAssignmentRule().getType().getClassifier())) {
					Solution s = new MonoSingleAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// assignments+=MonoListAssignment
	protected class ObjectNew_4_1_1_Assignment_assignments extends AssignmentToken {

		public ObjectNew_4_1_1_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getAssignmentsAssignment_4_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getMonoListAssignmentRule().getType().getClassifier())) {
					Solution s = new MonoListAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "}"
	protected class ObjectNew_4_2_Keyword extends KeywordToken {

		public ObjectNew_4_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectNewAccess().getRightCurlyBracketKeyword_4_2();
		}
	}

	/************ end Rule ObjectNew ****************/

	/************
	 * begin Rule ObjectCopy **************** ObjectCopy: "copy" resource=[NamedResource] fragment=FRAGMENT
	 * (name=ID)? ("{" (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?;
	 **/

	// "copy" resource=[NamedResource] fragment=FRAGMENT (name=ID)? ("{"
	// (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?
	protected class ObjectCopy_Group extends GroupToken {

		public ObjectCopy_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getGroup();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectCopy_4_Group(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectCopy_3_Assignment_name(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectCopy_2_Assignment_fragment(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					while (s3 != null) {
						Solution s4 = new ObjectCopy_1_Assignment_resource(s3.getCurrent(), s3
								.getPredecessor()).firstSolution();
						while (s4 != null) {
							Solution s5 = new ObjectCopy_0_Keyword_copy(s4.getCurrent(), s4.getPredecessor())
									.firstSolution();
							if (s5 != null) {
								last = s5.getPredecessor();
								return s5;
							} else {
								s4 = s4.getPredecessor().nextSolution(this, s4);
							}
						}
						s3 = s3.getPredecessor().nextSolution(this, s3);
					}
					s2 = s2.getPredecessor().nextSolution(this, s2);
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "copy"
	protected class ObjectCopy_0_Keyword_copy extends KeywordToken {

		public ObjectCopy_0_Keyword_copy(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getCopyKeyword_0();
		}
	}

	// resource=[NamedResource]
	protected class ObjectCopy_1_Assignment_resource extends AssignmentToken {

		public ObjectCopy_1_Assignment_resource(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getResourceAssignment_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("resource", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("resource");
			if (value instanceof EObject) { // xtext::CrossReference
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getObjectCopyAccess()
						.getResourceNamedResourceCrossReference_1_0().getType().getClassifier())) {
					type = AssignmentType.CR;
					element = grammarAccess.getObjectCopyAccess()
							.getResourceNamedResourceCrossReference_1_0();
					return new Solution(obj);
				}
			}
			return null;
		}
	}

	// fragment=FRAGMENT
	protected class ObjectCopy_2_Assignment_fragment extends AssignmentToken {

		public ObjectCopy_2_Assignment_fragment(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getFragmentAssignment_2();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("fragment", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("fragment");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectCopyAccess().getFragmentFRAGMENTTerminalRuleCall_2_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// (name=ID)?
	protected class ObjectCopy_3_Assignment_name extends AssignmentToken {

		public ObjectCopy_3_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getNameAssignment_3();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("name", !IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("name");
			if (Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer
												// rule
				type = AssignmentType.LRC;
				element = grammarAccess.getObjectCopyAccess().getNameIDTerminalRuleCall_3_0();
				return new Solution(obj);
			}
			return null;
		}
	}

	// ("{" (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)* "}")?
	protected class ObjectCopy_4_Group extends GroupToken {

		public ObjectCopy_4_Group(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Group getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getGroup_4();
		}

		@Override
		protected Solution createSolution() {
			Solution s1 = new ObjectCopy_4_2_Keyword(current, this).firstSolution();
			while (s1 != null) {
				Solution s2 = new ObjectCopy_4_1_Alternatives(s1.getCurrent(), s1.getPredecessor())
						.firstSolution();
				while (s2 != null) {
					Solution s3 = new ObjectCopy_4_0_Keyword(s2.getCurrent(), s2.getPredecessor())
							.firstSolution();
					if (s3 != null) {
						last = s3.getPredecessor();
						return s3;
					} else {
						s2 = s2.getPredecessor().nextSolution(this, s2);
					}
				}
				s1 = s1.getPredecessor().nextSolution(this, s1);
			}
			return null;
		}
	}

	// "{"
	protected class ObjectCopy_4_0_Keyword extends KeywordToken {

		public ObjectCopy_4_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getLeftCurlyBracketKeyword_4_0();
		}
	}

	// (assignments+=MonoSingleAssignment|assignments+=MonoListAssignment)*
	protected class ObjectCopy_4_1_Alternatives extends AlternativesToken {

		public ObjectCopy_4_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, IS_MANY, !IS_REQUIRED);
		}

		@Override
		public Alternatives getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getAlternatives_4_1();
		}

		protected AbstractToken createChild(int id) {
			switch (id) {
				case 0:
					return new ObjectCopy_4_1_0_Assignment_assignments(current, this);
				case 1:
					return new ObjectCopy_4_1_1_Assignment_assignments(current, this);
				default:
					return null;
			}
		}
	}

	// assignments+=MonoSingleAssignment
	protected class ObjectCopy_4_1_0_Assignment_assignments extends AssignmentToken {

		public ObjectCopy_4_1_0_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getAssignmentsAssignment_4_1_0();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getMonoSingleAssignmentRule().getType().getClassifier())) {
					Solution s = new MonoSingleAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// assignments+=MonoListAssignment
	protected class ObjectCopy_4_1_1_Assignment_assignments extends AssignmentToken {

		public ObjectCopy_4_1_1_Assignment_assignments(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		@Override
		public Assignment getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getAssignmentsAssignment_4_1_1();
		}

		@Override
		protected Solution createSolution() {
			if ((value = current.getConsumable("assignments", IS_REQUIRED)) == null)
				return null;
			IInstanceDescription obj = current.cloneAndConsume("assignments");

			if (value instanceof EObject) { // xtext::RuleCall
				IInstanceDescription param = getDescr((EObject)value);
				if (param.isInstanceOf(grammarAccess.getMonoListAssignmentRule().getType().getClassifier())) {
					Solution s = new MonoListAssignment_Group(param, this).firstSolution();
					while (s != null && !isConsumed(s, this))
						s = s.getPredecessor().nextSolution(this, s);
					if (s != null) {
						type = AssignmentType.PRC;
						return new Solution(obj, s.getPredecessor());
					}
				}
			}

			return null;
		}
	}

	// "}"
	protected class ObjectCopy_4_2_Keyword extends KeywordToken {

		public ObjectCopy_4_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
			super(curr, pred, !IS_MANY, IS_REQUIRED);
		}

		public Keyword getGrammarElement() {
			return grammarAccess.getObjectCopyAccess().getRightCurlyBracketKeyword_4_2();
		}
	}

	/************ end Rule ObjectCopy ****************/

}

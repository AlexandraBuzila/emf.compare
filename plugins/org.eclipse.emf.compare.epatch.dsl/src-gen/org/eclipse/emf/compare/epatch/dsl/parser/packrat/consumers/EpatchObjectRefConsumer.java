/*
* generated by Xtext
*/
package org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess.ObjectRefElements;

public final class EpatchObjectRefConsumer extends NonTerminalConsumer {

	private ObjectRefElements rule;	

	private INonTerminalConsumer biListAssignmentConsumer;

	private INonTerminalConsumer biSingleAssignmentConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer crossReference$8$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer crossReference$16$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer crossReference$23$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer ruleCall$27$Consumer;

	private IElementConsumer group$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private IElementConsumer alternatives$30$Consumer;

	private IElementConsumer assignment$31$Consumer;

	private IElementConsumer ruleCall$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer ruleCall$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$18$Delimiter;

	private ISequenceMatcher ruleCall$20$Delimiter;

	private ISequenceMatcher ruleCall$25$Delimiter;

	private ISequenceMatcher ruleCall$27$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(alternatives$5$Consumer);
			acceptor.accept(group$28$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$6$Consumer);
			acceptor.accept(group$13$Consumer);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$8$Consumer;
		}
	}

	protected class CrossReference$8$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$8$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends GroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(assignment$26$Consumer);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$16$Consumer;
		}
	}

	protected class CrossReference$16$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$16$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getRuleCall$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$20$Consumer;
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$23$Consumer;
		}
	}

	protected class CrossReference$23$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$23$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "rightRes", false, false, getElement(), getRuleCall$25$Delimiter(), optional);
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$27$Consumer;
		}
	}

	protected class RuleCall$27$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$27$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "rightFrag", false, false, getElement(), getRuleCall$27$Delimiter(), optional);
		}
	}

	protected class Group$28$Consumer extends OptionalGroupConsumer {
		
		protected Group$28$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$29$Consumer);
			acceptor.accept(alternatives$30$Consumer);
			acceptor.accept(keyword$35$Consumer);
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$29$Delimiter(), optional);
		}
	}

	protected class Alternatives$30$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$30$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$31$Consumer);
			acceptor.accept(assignment$33$Consumer);
		}
	}

	protected class Assignment$31$Consumer extends AssignmentConsumer {
		
		protected Assignment$31$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$32$Consumer;
		}
	}

	protected class RuleCall$32$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$32$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biSingleAssignmentConsumer, "assignments", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$33$Consumer extends AssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$34$Consumer;
		}
	}

	protected class RuleCall$34$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$34$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biListAssignmentConsumer, "assignments", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	public EpatchObjectRefConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$18$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$27$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ObjectRefElements getRule() {
		return rule;
	}
	
	public void setRule(ObjectRefElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getObjectKeyword_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getNameAssignment_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getNameIDTerminalRuleCall_1_0());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.getAlternatives_2());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_2_0());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getLeftResAssignment_2_0_0());
		crossReference$8$Consumer = new CrossReference$8$Consumer(rule.getLeftResNamedResourceCrossReference_2_0_0_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getLeftFragAssignment_2_0_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getLeftFragFRAGMENTTerminalRuleCall_2_0_1_0());
		group$13$Consumer = new Group$13$Consumer(rule.getGroup_2_1());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.getLeftKeyword_2_1_0());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getLeftResAssignment_2_1_1());
		crossReference$16$Consumer = new CrossReference$16$Consumer(rule.getLeftResNamedResourceCrossReference_2_1_1_0());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.getLeftFragAssignment_2_1_2());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.getLeftFragFRAGMENTTerminalRuleCall_2_1_2_0());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.getRightKeyword_2_1_3());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.getRightResAssignment_2_1_4());
		crossReference$23$Consumer = new CrossReference$23$Consumer(rule.getRightResNamedResourceCrossReference_2_1_4_0());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.getRightFragAssignment_2_1_5());
		ruleCall$27$Consumer = new RuleCall$27$Consumer(rule.getRightFragFRAGMENTTerminalRuleCall_2_1_5_0());
		group$28$Consumer = new Group$28$Consumer(rule.getGroup_3());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getLeftCurlyBracketKeyword_3_0());
		alternatives$30$Consumer = new Alternatives$30$Consumer(rule.getAlternatives_3_1());
		assignment$31$Consumer = new Assignment$31$Consumer(rule.getAssignmentsAssignment_3_1_0());
		ruleCall$32$Consumer = new RuleCall$32$Consumer(rule.getAssignmentsBiSingleAssignmentParserRuleCall_3_1_0_0());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.getAssignmentsAssignment_3_1_1());
		ruleCall$34$Consumer = new RuleCall$34$Consumer(rule.getAssignmentsBiListAssignmentParserRuleCall_3_1_1_0());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.getRightCurlyBracketKeyword_3_2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setBiListAssignmentConsumer(INonTerminalConsumer biListAssignmentConsumer) {
		this.biListAssignmentConsumer = biListAssignmentConsumer;
	}
	
	public void setBiSingleAssignmentConsumer(INonTerminalConsumer biSingleAssignmentConsumer) {
		this.biSingleAssignmentConsumer = biSingleAssignmentConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}
	
	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$18$Delimiter() {
		return ruleCall$18$Delimiter;
	}
	
	public void setRuleCall$18$Delimiter(ISequenceMatcher matcher) {
		ruleCall$18$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$25$Delimiter() {
		return ruleCall$25$Delimiter;
	}
	
	public void setRuleCall$25$Delimiter(ISequenceMatcher matcher) {
		ruleCall$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$27$Delimiter() {
		return ruleCall$27$Delimiter;
	}
	
	public void setRuleCall$27$Delimiter(ISequenceMatcher matcher) {
		ruleCall$27$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}

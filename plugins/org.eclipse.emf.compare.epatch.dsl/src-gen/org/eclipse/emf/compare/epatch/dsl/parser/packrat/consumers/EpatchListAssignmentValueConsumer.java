/*
 * generated by Xtext
 */
package org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess.ListAssignmentValueElements;

public final class EpatchListAssignmentValueConsumer extends NonTerminalConsumer {

	private ListAssignmentValueElements rule;

	private INonTerminalConsumer createdObjectConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer crossReference$15$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer group$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private IElementConsumer keyword$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer ruleCall$28$Consumer;

	private IElementConsumer group$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer crossReference$31$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer ruleCall$35$Consumer;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$26$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	private ISequenceMatcher ruleCall$9$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$17$Delimiter;

	private ISequenceMatcher ruleCall$21$Delimiter;

	private ISequenceMatcher ruleCall$25$Delimiter;

	private ISequenceMatcher ruleCall$33$Delimiter;

	private ISequenceMatcher ruleCall$35$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {

		protected Group$1$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(alternatives$5$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {

		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "index", false, false, getElement(),
					getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {

		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$6$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(group$13$Consumer);
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(group$29$Consumer);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {

		protected Group$6$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {

		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(),
					getRuleCall$9$Delimiter(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {

		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(),
					getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends GroupConsumer {

		protected Group$13$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(group$18$Consumer);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {

		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$15$Consumer;
		}
	}

	protected class CrossReference$15$Consumer extends ElementConsumer<CrossReference> {

		protected CrossReference$15$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refObject", false, false, getElement(),
					getRuleCall$17$Delimiter(), optional);
		}
	}

	protected class Group$18$Consumer extends OptionalGroupConsumer {

		protected Group$18$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(group$22$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {

		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refFeature", false, false, getElement(),
					getRuleCall$21$Delimiter(), optional);
		}
	}

	protected class Group$22$Consumer extends OptionalGroupConsumer {

		protected Group$22$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(assignment$24$Consumer);
			acceptor.accept(keyword$26$Consumer);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {

		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(),
					getRuleCall$25$Delimiter(), optional);
		}
	}

	protected class Keyword$26$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$26$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$26$Delimiter(), optional);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {

		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$28$Consumer;
		}
	}

	protected class RuleCall$28$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$28$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(createdObjectConsumer, "newObject", false, false, false, getElement(),
					optional);
		}
	}

	protected class Group$29$Consumer extends GroupConsumer {

		protected Group$29$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$30$Consumer);
			acceptor.accept(assignment$34$Consumer);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {

		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$31$Consumer;
		}
	}

	protected class CrossReference$31$Consumer extends ElementConsumer<CrossReference> {

		protected CrossReference$31$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "import", false, false, getElement(),
					getRuleCall$33$Delimiter(), optional);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {

		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$35$Consumer;
		}
	}

	protected class RuleCall$35$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$35$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "impFrag", false, false, getElement(),
					getRuleCall$35$Delimiter(), optional);
		}
	}

	public EpatchListAssignmentValueConsumer(INonTerminalConsumerConfiguration configuration,
			ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$26$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$33$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$35$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}

	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ListAssignmentValueElements getRule() {
		return rule;
	}

	public void setRule(ListAssignmentValueElements rule) {
		this.rule = rule;

		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getIndexAssignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getIndexINTTerminalRuleCall_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getColonKeyword_1());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.getAlternatives_2());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_2_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getLeftSquareBracketKeyword_2_0_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getRefIndexAssignment_2_0_1());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getRefIndexINTTerminalRuleCall_2_0_1_0());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getRightSquareBracketKeyword_2_0_2());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getValueAssignment_2_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getValueSTRINGTerminalRuleCall_2_1_0());
		group$13$Consumer = new Group$13$Consumer(rule.getGroup_2_2());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getRefObjectAssignment_2_2_0());
		crossReference$15$Consumer = new CrossReference$15$Consumer(rule
				.getRefObjectNamedObjectCrossReference_2_2_0_0());
		group$18$Consumer = new Group$18$Consumer(rule.getGroup_2_2_1());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getFullStopKeyword_2_2_1_0());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getRefFeatureAssignment_2_2_1_1());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getRefFeatureIDTerminalRuleCall_2_2_1_1_0());
		group$22$Consumer = new Group$22$Consumer(rule.getGroup_2_2_1_2());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.getLeftSquareBracketKeyword_2_2_1_2_0());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.getRefIndexAssignment_2_2_1_2_1());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.getRefIndexINTTerminalRuleCall_2_2_1_2_1_0());
		keyword$26$Consumer = new Keyword$26$Consumer(rule.getRightSquareBracketKeyword_2_2_1_2_2());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.getNewObjectAssignment_2_3());
		ruleCall$28$Consumer = new RuleCall$28$Consumer(rule.getNewObjectCreatedObjectParserRuleCall_2_3_0());
		group$29$Consumer = new Group$29$Consumer(rule.getGroup_2_4());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.getImportAssignment_2_4_0());
		crossReference$31$Consumer = new CrossReference$31$Consumer(rule
				.getImportImportCrossReference_2_4_0_0());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.getImpFragAssignment_2_4_1());
		ruleCall$35$Consumer = new RuleCall$35$Consumer(rule.getImpFragFRAGMENTTerminalRuleCall_2_4_1_0());
	}

	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}

	public void setCreatedObjectConsumer(INonTerminalConsumer createdObjectConsumer) {
		this.createdObjectConsumer = createdObjectConsumer;
	}

	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}

	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}

	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}

	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}

	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}

	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}

	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}

	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}

	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}

	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$26$Delimiter() {
		return keyword$26$Delimiter;
	}

	public void setKeyword$26$Delimiter(ICharacterClass characterClass) {
		keyword$26$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}

	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}

	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}

	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$17$Delimiter() {
		return ruleCall$17$Delimiter;
	}

	public void setRuleCall$17$Delimiter(ISequenceMatcher matcher) {
		ruleCall$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$21$Delimiter() {
		return ruleCall$21$Delimiter;
	}

	public void setRuleCall$21$Delimiter(ISequenceMatcher matcher) {
		ruleCall$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$25$Delimiter() {
		return ruleCall$25$Delimiter;
	}

	public void setRuleCall$25$Delimiter(ISequenceMatcher matcher) {
		ruleCall$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$33$Delimiter() {
		return ruleCall$33$Delimiter;
	}

	public void setRuleCall$33$Delimiter(ISequenceMatcher matcher) {
		ruleCall$33$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$35$Delimiter() {
		return ruleCall$35$Delimiter;
	}

	public void setRuleCall$35$Delimiter(ISequenceMatcher matcher) {
		ruleCall$35$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

}

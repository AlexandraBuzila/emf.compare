/*
 * generated by Xtext
 */
package org.eclipse.emf.compare.epatch.dsl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.compare.epatch.dsl.services.EpatchGrammarAccess.AssignmentValueElements;

public final class EpatchAssignmentValueConsumer extends NonTerminalConsumer {

	private AssignmentValueElements rule;

	private INonTerminalConsumer createdObjectConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer crossReference$6$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer crossReference$22$Consumer;

	private IElementConsumer assignment$25$Consumer;

	private IElementConsumer ruleCall$26$Consumer;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$16$Delimiter;

	private ISequenceMatcher ruleCall$24$Delimiter;

	private ISequenceMatcher ruleCall$26$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {

		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(group$4$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(group$20$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {

		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(),
					getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Group$4$Consumer extends GroupConsumer {

		protected Group$4$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(group$9$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {

		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$6$Consumer;
		}
	}

	protected class CrossReference$6$Consumer extends ElementConsumer<CrossReference> {

		protected CrossReference$6$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refObject", false, false, getElement(),
					getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends OptionalGroupConsumer {

		protected Group$9$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(group$13$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {

		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refFeature", false, false, getElement(),
					getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends OptionalGroupConsumer {

		protected Group$13$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(keyword$17$Consumer);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {

		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(),
					getRuleCall$16$Delimiter(), optional);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {

		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {

		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(createdObjectConsumer, "newObject", false, false, false, getElement(),
					optional);
		}
	}

	protected class Group$20$Consumer extends GroupConsumer {

		protected Group$20$Consumer(final Group group) {
			super(group);
		}

		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$21$Consumer);
			acceptor.accept(assignment$25$Consumer);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {

		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$22$Consumer;
		}
	}

	protected class CrossReference$22$Consumer extends ElementConsumer<CrossReference> {

		protected CrossReference$22$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "import", false, false, getElement(),
					getRuleCall$24$Delimiter(), optional);
		}
	}

	protected class Assignment$25$Consumer extends AssignmentConsumer {

		protected Assignment$25$Consumer(final Assignment assignment) {
			super(assignment);
		}

		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$26$Consumer;
		}
	}

	protected class RuleCall$26$Consumer extends ElementConsumer<RuleCall> {

		protected RuleCall$26$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}

		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "impFrag", false, false, getElement(),
					getRuleCall$26$Delimiter(), optional);
		}
	}

	public EpatchAssignmentValueConsumer(INonTerminalConsumerConfiguration configuration,
			ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$16$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$24$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$26$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}

	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public AssignmentValueElements getRule() {
		return rule;
	}

	public void setRule(AssignmentValueElements rule) {
		this.rule = rule;

		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getValueAssignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getValueSTRINGTerminalRuleCall_0_0());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getRefObjectAssignment_1_0());
		crossReference$6$Consumer = new CrossReference$6$Consumer(rule
				.getRefObjectNamedObjectCrossReference_1_0_0());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_1_1());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getFullStopKeyword_1_1_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getRefFeatureAssignment_1_1_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getRefFeatureIDTerminalRuleCall_1_1_1_0());
		group$13$Consumer = new Group$13$Consumer(rule.getGroup_1_1_2());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.getLeftSquareBracketKeyword_1_1_2_0());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getRefIndexAssignment_1_1_2_1());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.getRefIndexINTTerminalRuleCall_1_1_2_1_0());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getRightSquareBracketKeyword_1_1_2_2());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getNewObjectAssignment_2());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getNewObjectCreatedObjectParserRuleCall_2_0());
		group$20$Consumer = new Group$20$Consumer(rule.getGroup_3());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.getImportAssignment_3_0());
		crossReference$22$Consumer = new CrossReference$22$Consumer(rule
				.getImportImportCrossReference_3_0_0());
		assignment$25$Consumer = new Assignment$25$Consumer(rule.getImpFragAssignment_3_1());
		ruleCall$26$Consumer = new RuleCall$26$Consumer(rule.getImpFragFRAGMENTTerminalRuleCall_3_1_0());
	}

	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}

	public void setCreatedObjectConsumer(INonTerminalConsumer createdObjectConsumer) {
		this.createdObjectConsumer = createdObjectConsumer;
	}

	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}

	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}

	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}

	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}

	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}

	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}

	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}

	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}

	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}

	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}

	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}

	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$16$Delimiter() {
		return ruleCall$16$Delimiter;
	}

	public void setRuleCall$16$Delimiter(ISequenceMatcher matcher) {
		ruleCall$16$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$24$Delimiter() {
		return ruleCall$24$Delimiter;
	}

	public void setRuleCall$24$Delimiter(ISequenceMatcher matcher) {
		ruleCall$24$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

	public ISequenceMatcher getRuleCall$26$Delimiter() {
		return ruleCall$26$Delimiter;
	}

	public void setRuleCall$26$Delimiter(ISequenceMatcher matcher) {
		ruleCall$26$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}

}

/**
 * Copyright (c) 2012 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 */
package org.eclipse.emf.compare.uml2diff.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.compare.uml2diff.util.Uml2diffAdapterFactory;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Uml2diffItemProviderAdapterFactory extends Uml2diffAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Uml2diffItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLAssociationChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLAssociationChangeItemProvider umlAssociationChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLAssociationChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLAssociationChangeAdapter() {
		if (umlAssociationChangeItemProvider == null) {
			umlAssociationChangeItemProvider = new UMLAssociationChangeItemProvider(this);
		}

		return umlAssociationChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLGeneralizationSetChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLGeneralizationSetChangeItemProvider umlGeneralizationSetChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLGeneralizationSetChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLGeneralizationSetChangeAdapter() {
		if (umlGeneralizationSetChangeItemProvider == null) {
			umlGeneralizationSetChangeItemProvider = new UMLGeneralizationSetChangeItemProvider(this);
		}

		return umlGeneralizationSetChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLDependencyChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLDependencyChangeItemProvider umlDependencyChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLDependencyChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLDependencyChangeAdapter() {
		if (umlDependencyChangeItemProvider == null) {
			umlDependencyChangeItemProvider = new UMLDependencyChangeItemProvider(this);
		}

		return umlDependencyChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLInterfaceRealizationChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLInterfaceRealizationChangeItemProvider umlInterfaceRealizationChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLInterfaceRealizationChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLInterfaceRealizationChangeAdapter() {
		if (umlInterfaceRealizationChangeItemProvider == null) {
			umlInterfaceRealizationChangeItemProvider = new UMLInterfaceRealizationChangeItemProvider(this);
		}

		return umlInterfaceRealizationChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLSubstitutionChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLSubstitutionChangeItemProvider umlSubstitutionChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLSubstitutionChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLSubstitutionChangeAdapter() {
		if (umlSubstitutionChangeItemProvider == null) {
			umlSubstitutionChangeItemProvider = new UMLSubstitutionChangeItemProvider(this);
		}

		return umlSubstitutionChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLExtendChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLExtendChangeItemProvider umlExtendChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLExtendChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLExtendChangeAdapter() {
		if (umlExtendChangeItemProvider == null) {
			umlExtendChangeItemProvider = new UMLExtendChangeItemProvider(this);
		}

		return umlExtendChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLExecutionSpecificationChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLExecutionSpecificationChangeItemProvider umlExecutionSpecificationChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLExecutionSpecificationChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLExecutionSpecificationChangeAdapter() {
		if (umlExecutionSpecificationChangeItemProvider == null) {
			umlExecutionSpecificationChangeItemProvider = new UMLExecutionSpecificationChangeItemProvider(this);
		}

		return umlExecutionSpecificationChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLDestructionEventChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLDestructionEventChangeItemProvider umlDestructionEventChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLDestructionEventChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLDestructionEventChangeAdapter() {
		if (umlDestructionEventChangeItemProvider == null) {
			umlDestructionEventChangeItemProvider = new UMLDestructionEventChangeItemProvider(this);
		}

		return umlDestructionEventChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLIntervalConstraintChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLIntervalConstraintChangeItemProvider umlIntervalConstraintChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLIntervalConstraintChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLIntervalConstraintChangeAdapter() {
		if (umlIntervalConstraintChangeItemProvider == null) {
			umlIntervalConstraintChangeItemProvider = new UMLIntervalConstraintChangeItemProvider(this);
		}

		return umlIntervalConstraintChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLMessageChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLMessageChangeItemProvider umlMessageChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLMessageChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLMessageChangeAdapter() {
		if (umlMessageChangeItemProvider == null) {
			umlMessageChangeItemProvider = new UMLMessageChangeItemProvider(this);
		}

		return umlMessageChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLStereotypePropertyChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLStereotypePropertyChangeItemProvider umlStereotypePropertyChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLStereotypePropertyChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLStereotypePropertyChangeAdapter() {
		if (umlStereotypePropertyChangeItemProvider == null) {
			umlStereotypePropertyChangeItemProvider = new UMLStereotypePropertyChangeItemProvider(this);
		}

		return umlStereotypePropertyChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLStereotypeApplicationChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLStereotypeApplicationChangeItemProvider umlStereotypeApplicationChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLStereotypeApplicationChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLStereotypeApplicationChangeAdapter() {
		if (umlStereotypeApplicationChangeItemProvider == null) {
			umlStereotypeApplicationChangeItemProvider = new UMLStereotypeApplicationChangeItemProvider(this);
		}

		return umlStereotypeApplicationChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLStereotypeReferenceChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLStereotypeReferenceChangeItemProvider umlStereotypeReferenceChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLStereotypeReferenceChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLStereotypeReferenceChangeAdapter() {
		if (umlStereotypeReferenceChangeItemProvider == null) {
			umlStereotypeReferenceChangeItemProvider = new UMLStereotypeReferenceChangeItemProvider(this);
		}

		return umlStereotypeReferenceChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.compare.uml2diff.UMLProfileApplicationChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UMLProfileApplicationChangeItemProvider umlProfileApplicationChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.compare.uml2diff.UMLProfileApplicationChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUMLProfileApplicationChangeAdapter() {
		if (umlProfileApplicationChangeItemProvider == null) {
			umlProfileApplicationChangeItemProvider = new UMLProfileApplicationChangeItemProvider(this);
		}

		return umlProfileApplicationChangeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (umlAssociationChangeItemProvider != null) umlAssociationChangeItemProvider.dispose();
		if (umlDependencyChangeItemProvider != null) umlDependencyChangeItemProvider.dispose();
		if (umlInterfaceRealizationChangeItemProvider != null) umlInterfaceRealizationChangeItemProvider.dispose();
		if (umlSubstitutionChangeItemProvider != null) umlSubstitutionChangeItemProvider.dispose();
		if (umlExtendChangeItemProvider != null) umlExtendChangeItemProvider.dispose();
		if (umlGeneralizationSetChangeItemProvider != null) umlGeneralizationSetChangeItemProvider.dispose();
		if (umlExecutionSpecificationChangeItemProvider != null) umlExecutionSpecificationChangeItemProvider.dispose();
		if (umlDestructionEventChangeItemProvider != null) umlDestructionEventChangeItemProvider.dispose();
		if (umlIntervalConstraintChangeItemProvider != null) umlIntervalConstraintChangeItemProvider.dispose();
		if (umlMessageChangeItemProvider != null) umlMessageChangeItemProvider.dispose();
		if (umlStereotypePropertyChangeItemProvider != null) umlStereotypePropertyChangeItemProvider.dispose();
		if (umlStereotypeApplicationChangeItemProvider != null) umlStereotypeApplicationChangeItemProvider.dispose();
		if (umlStereotypeReferenceChangeItemProvider != null) umlStereotypeReferenceChangeItemProvider.dispose();
		if (umlProfileApplicationChangeItemProvider != null) umlProfileApplicationChangeItemProvider.dispose();
	}

}

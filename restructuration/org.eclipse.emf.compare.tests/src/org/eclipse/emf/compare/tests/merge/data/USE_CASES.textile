h1. Comparison use cases

@Author@ Laurent Goubet
@Contact@ laurent.goubet@obeo.fr

Copyright (c) 2011, 2012 Obeo.

{toc}

h2. Model Element Changes

	This will list all possible use differences involving a containment reference.

	h3. Changes in a single-value containment reference
		* Adding a child (noChildSingleContainment.merge -> childSingleContainment.merge)
		* Deleting a child (childSingleContainment.merge -> noChildSingleContainment.merge)
		* Changing child to a new value (childSingleContainment.merge -> changedChildSingleContainment.merge)

	h3. Element A holding only one containment reference
		* Adding a child after all children of A (useCase001)
		* Adding a child before all children of A (useCase002)
		* Adding a child in the middle of the children of A (useCase003)

		* Removing the last of the children of A (useCase004)
		* Removing the first of the children of A (useCase005)
		* Removing a child from the middle of the children of A (useCase006)
	   
		h4. Moving an element from A to a child B of A
			* First child of A to first child of B (useCase007)
			* First child of A to last child of B (useCase008)
			* First child of A to middle of B (useCase009)
			* Last child of A to first child of B (useCase010)
			* Last child of A to last child of B (useCase011)
			* Last child of A to middle of B (useCase012)
			* Middle of A to first child of B (useCase013)
			* Middle of A to last child of B (useCase014)
			* Middle of A to middle of B (useCase015)
		 
		h4. Moving an element from a child B of A to A
			* First child of B to first child of A (useCase016)
			* First child of B to last child of A (useCase017)
			* First child of B to middle of A (useCase018)
			* Last child of B to first child of A (useCase019)
			* Last child of B to last child of A (useCase020)
			* Last child of B to middle of A (useCase021)
			* Middle of B to first child of A (useCase022)
			* Middle of B to last child of A (useCase023)
			* Middle of B to middle of A (useCase024)

		h4. Changing the order of the children of A
			* First child of A to last child of A (useCase025)
			* First child of A to middle of A (useCase026)
			* Last child of A to first child of A (useCase027)
			* Last child of A to middle of A (useCase028)
			* middle of A to first child of A (useCase029)
			* middle of A to last child of A (useCase030)
	 
	h3. Element A holding multiple containment references ref1 and ref2 (Serialization automatically reorders : "all children of ref1 before all children of ref2")
		* Adding a child in ref1 after all children contained by ref1 (useCase031)
		* Adding a child in ref1 before all children contained by ref1 (useCase032)
		* Adding a child in ref1 in the middle of all children contained by ref1 (useCase033)
			
		* Adding a child in ref2 after all children contained by ref2 (useCase034)
		* Adding a child in ref2 before all children contained by ref2 (useCase035)
		* Adding a child in ref2 in the middle of all children contained by ref2 (useCase036)
	   
		* Removing the first child from ref1 (useCase037)
		* Removing the last child from ref1 (useCase038)
		* Removing a child from the middle of ref1 (useCase039)

		* Removing the first child from ref2 (useCase040)
		* Removing the last child from ref2 (useCase041)
		* Removing a child from the middle of ref2 (useCase042)

		h4. Moving a child from ref1 so that it is then contained inside one of the children B' contained by ref2 ("pull down" in another containment reference)
			* First child of ref1 to first child of B' (useCase043)
			* First child of ref1 to last child of B' (useCase044)
			* First child of ref1 to middle of B' (useCase045)
			* Last child of ref1 to first child of B' (useCase046)
			* Last child of ref1 to last child of B' (useCase047)
			* Last child of ref1 to middle of B' (useCase048)
			* Middle of ref1 to first child of B' (useCase049)
			* Middle of ref1 to last child of B' (useCase050)
			* Middle of ref1 to middle of B' (useCase051)
			
		h4. Moving a child from ref2 so that it is then contained inside one of the children B contained by ref1 ("pull down" in another containment reference)
			* First child of ref2 to first child of B (useCase052)
			* First child of ref2 to last child of B (useCase053)
			* First child of ref2 to middle of B (useCase054)
			* Last child of ref2 to first child of B (useCase055)
			* Last child of ref2 to last child of B (useCase056)
			* Last child of ref2 to middle of B (useCase057)
			* Middle of ref2 to first child of B (useCase058)
			* Middle of ref2 to last child of B (useCase059)
			* Middle of ref2 to middle of B (useCase060)
				
		h4. Moving a child of one of the children B of ref1 to ref2 ("pull up" in another containment reference)
			* First child of B to first child of ref2 (useCase061)
			* First child of B to last child of ref2 (useCase062)
			* First child of B to middle of ref2 (useCase063)
			* Last child of B to first child of ref2 (useCase064)
			* Last child of B to last child of ref2 (useCase065)
			* Last child of B to middle of ref2 (useCase066)
			* Middle of B to first child of ref2 (useCase067)
			* Middle of B to last child of ref2 (useCase068)
			* Middle of B to middle of ref2 (useCase069)
				
		h4. Moving a child of one of the children B' of ref2 to ref1 ("pull up" in another containment reference)
			* First child of B' to first child of ref1 (useCase070)
			* First child of B' to last child of ref1 (useCase071)
			* First child of B' to middle of ref1 (useCase072)
			* Last child of B' to first child of ref1 (useCase073)
			* Last child of B' to last child of ref1 (useCase074)
			* Last child of B' to middle of ref1 (useCase075)
			* Middle of B' to first child of ref1 (useCase076)
			* Middle of B' to last child of ref1 (useCase077)
			* Middle of B' to middle of ref1 (useCase078)
				
		h4. Moving a child of ref1 to ref2 (changing containment reference)
			* First child of ref1 to first child of ref2 (useCase079)
			* First child of ref1 to last child of ref2 (useCase080)
			* First child of ref1 to middle of ref2 (useCase081)
			* Last child of ref1 to first child of ref2 (useCase082)
			* Last child of ref1 to last child of ref2 (useCase083)
			* Last child of ref1 to middle of ref2 (useCase084)
			* Middle of ref1 to first child of ref2 (useCase085)
			* Middle of ref1 to last child of ref2 (useCase086)
			* Middle of ref1 to middle of ref2 (useCase087)
			
		h4. Moving a child of ref2 to ref1 (changing containment reference)
			* First child of ref2 to first child of ref1 (useCase088)
			* First child of ref2 to last child of ref1 (useCase089)
			* First child of ref2 to middle of ref1 (useCase090)
			* Last child of ref2 to first child of ref1 (useCase091)
			* Last child of ref2 to last child of ref1 (useCase092)
			* Last child of ref2 to middle of ref1 (useCase093)
			* Middle of ref2 to first child of ref1 (useCase094)
			* Middle of ref2 to last child of ref1 (useCase095)
			* Middle of ref2 to middle of ref1 (useCase096)
				
		h4. Moving a child of ref1 to ref1 (reordering)
			* First child of ref1 to last child of ref1 (useCase097)
			* First child of ref1 to middle of ref1 (useCase098)
			* Last child of ref1 to first child of ref1 (useCase099)
			* Last child of ref1 to middle of ref1 (useCase100)
			* Middle of ref1 to first child of ref1 (useCase101)
			* Middle of ref1 to last child of ref1 (useCase102)
				
		h4. Moving a child of ref2 to ref2 (reordering)
			* First child of ref2 to last child of ref2 (useCase103)
			* First child of ref2 to middle of ref2 (useCase104)
			* Last child of ref2 to first child of ref2 (useCase105)
			* Last child of ref2 to middle of ref2 (useCase106)
			* Middle of ref2 to first child of ref2 (useCase107)
			* Middle of ref2 to last child of ref2 (useCase108)

h2. Attribute changes

	h3. Single-valued attribute
		* Setting the value (noValue.merge -> value.merge)
		* Unsetting the value (value.merge -> noValue.merge)
		* Changing the value (value.merge -> changedValue.merge)
		
	h3. Multi-valued attribute
		* Adding a new value (useCase109)
		* Removing a value (useCase110)
		
		h4. Moving a value to another position
			* First value to last position (useCase111)
			* First value to middle of the list (useCase112)
			* Last value to first position (useCase113)
			* Last value to middle of the list (useCase114)
			* Middle of the list to first position (useCase115)
			* Middle of the list to last position (useCase116)
		
		h4. Moving multiple values to new positions
			* First value to last position, last value to first (useCase117)
			* First value to last, last to middle (useCase118)
			* First value to middle, last value to first (useCase119)
			* First value to middle, last value to middle (useCase120)
			* Middle to first, middle to last (useCase121)
			
		h4. Moving multiple values to new positions while removing a value
			* Removing first, second to last, last to first (useCase122)
			* Removing first, second to last, last to middle (useCase123)
			* Removing first, second to middle, last to first (useCase124)
			* Removing first, second to middle, last to middle (useCase125)
			* Removing first, middle to first, middle to last (useCase126)
			
			* Removing middle, first to last, last to first (useCase127)
			* Removing middle, first to last, last to middle (useCase128)
			* Removing middle, first to middle, last to first (useCase129)
			* Removing middle, first to middle, last to middle (useCase130)
			* Removing middle, middle to first, middle to last (useCase131)
			
			* Removing last, first to last, "next to last" to first (useCase132)
			* Removing last, first to last, "next to last" to middle (useCase133)
			* Removing last, first to middle, "next to last" to first (useCase134)
			* Removing last, first to middle, "next to last" to middle (useCase135)
			* Removing last, middle to first, middle to last (useCase136)

h2. Reference changes

	h3. Simple use-cases : no eOpposite, no "dependent" diff
	
		h4. Single-valued reference
			* Setting the reference to a resolved element (noValue.merge -> value.merge)
			* Unsetting the reference pointing to a resolved element (value.merge -> noValue.merge)
			* Changing a reference pointing to a resolved element so that it points to another resolved element (value.merge -> changedValue.merge)
			* Changing a reference pointing to a resolved element so that it points to an unresolved proxy (value.merge -> changedValueProxy.merge)
		
			* Setting the value to an unresolved proxy (noValue.merge -> valueProxy.merge)
			* Unsetting the reference pointing to an unresolved proxy (valueProxy.merge -> noValue.merge)
			* Changing a reference pointing to an unresolved proxy so that it points to a resolved element (valueProxy.merge -> changedValue.merge)
			* Changing a reference pointing to an unresolved proxy so that it points to another unresolved proxy (valueProxy.merge -> changedValueProxy.merge)
		
		h4. Multi-valued reference
			* Adding a new resolved element as value (useCase137)
			* Adding an unresolved proxy as value (useCase138)
			
			* Removing a resolved element from the list of values (useCase139)
			* Removing an unresolved proxy from the list of values (useCase140)
			
			h5. Moving a value to another position
				* First value to last position (useCase141)
				* First value to middle of the list (useCase142)
				* Last value to first position (useCase143)
				* Last value to middle of the list (useCase144)
				* Middle of the list to first position (useCase145)
				* Middle of the list to last position (useCase146)
				
			h5. Moving multiple values to new positions
				* First value to last position, last value to first (useCase147)
				* First value to last, last to middle (useCase148)
				* First value to middle, last value to first (useCase149)
				* First value to middle, last value to middle (useCase150)
				* Middle to first, middle to last (useCase151)
				
			h5. Moving multiple values to new positions while removing a value
				* Removing first, second to last, last to first (useCase152)
				* Removing first, second to last, last to middle (useCase153)
				* Removing first, second to middle, last to first (useCase154)
				* Removing first, second to middle, last to middle (useCase155)
				* Removing first, middle to first, middle to last (useCase156)
			
				* Removing middle, first to last, last to first (useCase157)
				* Removing middle, first to last, last to middle (useCase158)
				* Removing middle, first to middle, last to first (useCase159)
				* Removing middle, first to middle, last to middle (useCase160)
				* Removing middle, middle to first, middle to last (useCase161)
			
				* Removing last, first to last, "next to last" to first (useCase162)
				* Removing last, first to last, "next to last" to middle (useCase163)
				* Removing last, first to middle, "next to last" to first (useCase164)
				* Removing last, first to middle, "next to last" to middle (useCase165)
				* Removing last, middle to first, middle to last (useCase166)
				
			h5. Moving multiple values to new positions while removing a value and adding another
				Complex changes for a reference with six base values named after their initial index, changes in the order they are to be made :
				* Removing 1, adding '7' after 6, moving 2 to after 7, moving 6 to before 3 (useCase167)
				* Removing 1, adding '7' before 2, moving 2 to after 6, moving 6 to before 7 (useCase168)
				* Removing 1, adding '7' before 4, moving 2 to after 6, moving 6 to before 3 (useCase169)
				
				* Removing 4, adding '7' after 6, moving 1 to after 7, moving 6 to before 2 (useCase170)
				* Removing 4, adding '7' before 1, moving 1 to after 6, moving 6 to before 7 (useCase171)
				* Removing 4, adding '7' before 3, moving 1 to after 6, moving 6 to before 2 (useCase172)
				
				* Removing 6, adding '7' after 5, moving 1 to after 7, moving 5 to before 2 (useCase173)
				* Removing 6, adding '7' before 1, moving 1 to after 5, moving 5 to before 7 (useCase174)
				* Removing 6, adding '7' before 4, moving 1 to after 5, moving 5 to before 2 (useCase175)
				
	h3. Complex use-case : referencing an element B located in the content tree of an unmatched element A
		Element B is unmatched (added or removed) and holds two containment references ref1 and ref2. A new element C is added in the specified one of these references.
		A third element A, present in both versions of the model, will reference C through either a multi-valued or single-valued reference.
		
		h4. Single-valued reference
			* B added to the model, C added to ref1 of B, setting a reference from A to C (useCase176_base -> useCase176_modified)
			* B added to the model, C added to ref2 of B, setting a reference from A to C (useCase176_base -> useCase177_modified)
			* C added to ref1 of B, B removed from the model, unsetting a reference from A to C (useCase178_base -> useCase178_modified)
			* C added to ref2 of B, B removed from the model, unsetting a reference from A to C (useCase179_base -> useCase179_modified)
			
		h4. Multi-valued reference
			Since we run all of these in both directions, we do not need the "removed reference to a removed element" cases which are the exact opposites of these
			* B added to the model, C added to ref1 of B, adding a reference from A to C as first (useCase180_base -> useCase180_modified)
			* B added to the model, C added to ref2 of B, adding a reference from A to C as first (useCase180_base -> useCase181_modified)
			* B added to the model, C added to ref1 of B, adding a reference from A to C in the middle (useCase180_base -> useCase182_modified)
			* B added to the model, C added to ref2 of B, adding a reference from A to C in the middle (useCase180_base -> useCase183_modified)
			* B added to the model, C added to ref1 of B, adding a reference from A to C as last (useCase180_base -> useCase184_modified)
			* B added to the model, C added to ref2 of B, adding a reference from A to C as last (useCase180_base -> useCase185_modified)